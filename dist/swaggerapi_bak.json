{
  "swagger": "2.0",
  "info": {
    "title": "Social API",
    "description": "Social API for socialengine.",
    "version": "1.0.0"
  },
  "host": "mi.costarica.com",
  "schemes": [
    "http"
  ],
  "paths": {
    "/socialapi/auth/post/login": {
      "post": {
        "summary": "Login",
        "description": "Send a login request to the server. The request contains user's name or email address and password.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "Email address or username.",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password of your account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Successfully logged in",
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          }
        }
      }
    },
    "/socialapi/auth/post/signup": {
      "post": {
        "summary": "Signup",
        "description": "Send a signup request to the server . The request contains username, email address, profile address, profile type and password. Successfull request create new user at server.",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "Email address.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password of your account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileAddress",
            "in": "formData",
            "description": "Profile Address of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileType",
            "in": "formData",
            "description": "Profile Type of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileFields['1_2_3']",
            "in": "formData",
            "description": "Profile Fields First Name of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileFields['1_2_4']",
            "in": "formData",
            "description": "Profile Fields Last Name of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileFields['1_2_5']",
            "in": "formData",
            "description": "Profile Fields Gender of the account. 2 for Male and 3 for Female",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileFields['1_2_13']",
            "in": "formData",
            "description": "Profile Fields About us of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "User account has been created successfully",
            "schema": {
              "$ref": "#/definitions/AuthSignup"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Successfully logged in",
            "schema": {
              "$ref": "#/definitions/AuthSignup"
            }
          }
        }
      }
    },
    "/socialapi/auth/post/mobileotp": {
      "post": {
        "summary": "Mobile Signup",
        "description": "Send an OTP to given Mobile Number. The request contains mobile no of the user.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mobileno",
            "in": "formData",
            "description": "Mobile No. eg. +919876543210",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "formData",
            "description": "device id of the phone",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "OTP sent successfull",
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          },
          "400": {
            "description": "Mobile number not valid number"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "OTP sent failed"
          }
        }
      }
    },
    "/socialapi/auth/post/mobilesignup": {
      "post": {
        "summary": "Mobile Signup",
        "description": "Send a Mobile Signup after verification request to the server. The request contains mobile no and otp sent to that mobile no of the user.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mobileno",
            "in": "formData",
            "description": "Mobile No. eg. +919876543210",
            "required": true,
            "type": "string"
          },
          {
            "name": "otp",
            "in": "formData",
            "description": "Enter OTP",
            "required": true,
            "type": "number"
          },
          {
            "name": "deviceId",
            "in": "formData",
            "description": "device id of the phone",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "deviceType",
            "in": "formData",
            "description": "device type of the phone. e.g. ios or anodroid",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Signup successfull",
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          },
          "400": {
            "description": "Data missmatch"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/auth/post/mobilelogin": {
      "post": {
        "summary": "Mobile Login",
        "description": "Send a Mobile Login request. The request contains mobile no and otp sent to that mobile no of the user.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mobileno",
            "in": "formData",
            "description": "Mobile No.",
            "required": true,
            "type": "string"
          },
          {
            "name": "otp",
            "in": "formData",
            "description": "Enter OTP",
            "required": true,
            "type": "number"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Login successfull",
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          },
          "400": {
            "description": "Data missmatch"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/auth/post/facebook": {
      "post": {
        "summary": "Facebook Check",
        "description": "Request to check whether user exist with given facebook uid. If user exist, it return status true, message 'User account already sync with given uid' and user basic info(userId, username). If there is no sync found it re return status false, message 'No user account sync with given uid'.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "facebook_uid",
            "in": "formData",
            "description": "uuid for facebook account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "email address of facebook account.",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Facebook account already sync with system user.",
            "schema": {
              "$ref": "#/definitions/AuthFacebook"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Successfully logged in",
            "schema": {
              "$ref": "#/definitions/AuthFacebook"
            }
          }
        }
      }
    },
    "/socialapi/auth/post/facebooksync": {
      "post": {
        "summary": "Facebook Sync",
        "description": "Request to sync facebook info with user. If user sync with twitter account successfully, it will return status true, message 'User account sync with social information' and user basic info (email,userId,username).If it fails during sync, it will return status false, message 'User not sync with social information'",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "facebook_uid",
            "in": "formData",
            "description": "uid for facebook account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "formData",
            "description": "user id of user account.",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Successfully sync user with facebook account.",
            "schema": {
              "$ref": "#/definitions/AuthFacebookSync"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Successfully sync user with facebook account.",
            "schema": {
              "$ref": "#/definitions/AuthFacebookSync"
            }
          }
        }
      }
    },
    "/socialapi/auth/post/facebooksignup": {
      "post": {
        "summary": "Facebook Signup",
        "description": "Send a request to signup with facebook account. New user has been added to the system and sync with given facebook uid. It returns as status true, message 'Signup successfully completed' with basic user info (username,email,userId,thumbnail).",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "facebook_uid",
            "in": "formData",
            "description": "uuid for facebook account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "user id of user account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "username of user account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "photo",
            "in": "formData",
            "description": "photo data in base 64 format.",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Successfully signup  user with facebook account.",
            "schema": {
              "$ref": "#/definitions/AuthFacebookSignup"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Successfully sync user with facebook account.",
            "schema": {
              "$ref": "#/definitions/AuthFacebookSignup"
            }
          }
        }
      }
    },
    "/socialapi/auth/post/twitter": {
      "post": {
        "summary": "Twitter Login",
        "description": "Request to check twitter account info in the system. If user exist, it return status true, message 'User account already sync with given uid' and user basic info(userId, username). If there is no sync found it return status false, message 'No user account sync with given uid'.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "twitter_uid",
            "in": "formData",
            "description": "uid for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "twitter_token",
            "in": "formData",
            "description": "token for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "twitter_secret",
            "in": "formData",
            "description": "secret key for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "email address of twiiter account.",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Twitter account already sync with system user.",
            "schema": {
              "$ref": "#/definitions/AuthTwitter"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Twitter account already sync with system user.",
            "schema": {
              "$ref": "#/definitions/AuthTwitter"
            }
          }
        }
      }
    },
    "/socialapi/auth/post/twittersync": {
      "post": {
        "summary": "Twitter Sync",
        "description": "Request to sync twitter info with user. If user sync with twitter account successfully, it will return status true, message 'User account sync with social information' and user basic info (email,userId,username).If it fails during sync, it will return status false, message 'User not sync with social information'",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "twitter_uid",
            "in": "formData",
            "description": "uid for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "twitter_token",
            "in": "formData",
            "description": "token for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "twitter_secret",
            "in": "formData",
            "description": "secret key for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "formData",
            "description": "user id of user account.",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Twitter account sync with system user.",
            "schema": {
              "$ref": "#/definitions/AuthTwitterSync"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Twitter account sync with system user.",
            "schema": {
              "$ref": "#/definitions/AuthTwitterSync"
            }
          }
        }
      }
    },
    "/socialapi/auth/post/twittersignup": {
      "post": {
        "summary": "Twiiter Signup",
        "description": "Send a request to signup with twitter account. New user has been added to the system and sync with given twitter uid. It returns as status true, message 'Signup successfully completed' with basic user info (username,email,userId,thumbnail).",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "twitter_uid",
            "in": "formData",
            "description": "uid for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "twitter_token",
            "in": "formData",
            "description": "token for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "twitter_secret",
            "in": "formData",
            "description": "secret key for twitter account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "user id of user account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "username of user account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "photo",
            "in": "formData",
            "description": "photo data in base 64 format.",
            "required": false,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "header",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Successfully signup.",
            "schema": {
              "$ref": "#/definitions/AuthTwitterSignup"
            }
          },
          "400": {
            "description": "Invalid authentication supplied"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Successfully signup.",
            "schema": {
              "$ref": "#/definitions/AuthTwitterSignup"
            }
          }
        }
      }
    },
    "/socialapi/auth/get/logout": {
      "get": {
        "summary": "Logged out",
        "description": "Send a logeed out request to the server. User will be logged out from the system.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Logout Sucessfully.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Logout Sucessfully.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/auth/get/checkEmail": {
      "get": {
        "summary": "checkEmail",
        "description": "create a check email request to server. Server check whether email exist or not in database. It will return true if email is fine.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email address.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Email is fine!!",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Email is fine!!",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/auth/get/forgetPassword": {
      "get": {
        "summary": "forgetPassword",
        "description": "create a forget password request to server. Take email from client and submit request to server. Server will check email address is exist or not. If email exist in the system, it will send an email with instruction to proceed password recovery.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email address.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "You have been sent an email with instructions how to reset your password. If the email does not arrive within several minutes, be sure to check your spam or junk mail folders.",
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "You have been sent an email with instructions how to reset your password. If the email does not arrive within several minutes, be sure to check your spam or junk mail folders.",
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        }
      }
    },
    "/socialapi/auth/get/profileAddress": {
      "get": {
        "summary": "profileAddress",
        "description": "Check whether profile address exit in the system or not. Return true if does not exist and false if exist.",
        "parameters": [
          {
            "name": "profileAddress",
            "in": "query",
            "description": "profile address.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "You can choose this profile address.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "You can choose this profile address.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/auth/get/profileTypes": {
      "get": {
        "summary": "profileTypes",
        "description": "List all profile types available in the system. User hsa to select profile type at the time of signup.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "You can choose this profile address.",
            "schema": {
              "$ref": "#/definitions/AuthProfileTypes"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "You can choose this profile address.",
            "schema": {
              "$ref": "#/definitions/AuthProfileTypes"
            }
          }
        }
      }
    },
    "/socialapi/auth/get/profileFields": {
      "get": {
        "summary": "profileFields",
        "description": "Returns profile fileds neccessary for signup process e.g. first name, last name or birthdate etc.",
        "parameters": [
          {
            "name": "profileType",
            "in": "query",
            "description": "Profile Fields.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "You can choose this profile address.",
            "schema": {
              "$ref": "#/definitions/AuthProfileFields"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "You can choose this profile address.",
            "schema": {
              "$ref": "#/definitions/AuthProfileFields"
            }
          }
        }
      }
    },
    "/socialapi/auth/get/defaultPhoto": {
      "get": {
        "summary": "defaultPhoto",
        "description": "It will return default photos available for user profile. User has to select profile photo at the time of signup.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Default user photo",
            "schema": {
              "$ref": "#/definitions/DefaultPhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Default user photo",
            "schema": {
              "$ref": "#/definitions/DefaultPhoto"
            }
          }
        }
      }
    },
    "/socialapi/blogs/get/form": {
      "get": {
        "summary": "form",
        "description": "Request for blog form parameters. Send post request and return form parameters available for blog.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Show form parameters available for blog.",
            "schema": {
              "$ref": "#/definitions/BlogGetForm"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show form parameters available for blog.",
            "schema": {
              "$ref": "#/definitions/BlogGetForm"
            }
          }
        }
      }
    },
    "/socialapi/blogs/get/categories": {
      "get": {
        "summary": "categories",
        "description": "Request for all available blogs categories list. Send post request and return categories available for events.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Show list of categories available for blog.",
            "schema": {
              "$ref": "#/definitions/GroupGetCategory"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of categories available for blog.",
            "schema": {
              "$ref": "#/definitions/GroupGetCategory"
            }
          }
        }
      }
    },
    "/socialapi/blogs/get/list": {
      "get": {
        "summary": "list",
        "description": "Request for all blogs list. Send post request with user id and return blog list specific to user id.",
        "parameters": [
          {
            "name": "subjectType",
            "in": "query",
            "description": "To show the user blogs.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "subjectId",
            "in": "query",
            "description": "user id of the user which you want to show the blog and also add subject parameter.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "query",
            "description": "search the blog name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category id of the blogs which you want to see the list",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Show list of blogs",
            "schema": {
              "$ref": "#/definitions/BlogGetList"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of blogs",
            "schema": {
              "$ref": "#/definitions/BlogGetList"
            }
          }
        }
      }
    },
    "/socialapi/blogs/get/detail": {
      "get": {
        "summary": "detail",
        "description": "Request for blog's detail information. Send post request with blog id and return blog detailed information.",
        "parameters": [
          {
            "name": "blogId",
            "in": "query",
            "description": "blog id of blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Show detail of requested blog.",
            "schema": {
              "$ref": "#/definitions/BlogGetDetail"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show detail of requested blog.",
            "schema": {
              "$ref": "#/definitions/BlogGetDetail"
            }
          }
        }
      }
    },
    "/socialapi/blogs/get/comments": {
      "get": {
        "summary": "comments",
        "description": "Request for blog's content. Send post request with blog id and return blog comments.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "blog id of blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "object type is blog.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Show the blogs comments"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/blogs/post/blog": {
      "post": {
        "summary": "createBlog",
        "description": "Create a request to add new blog to server. Send post request with blog parameters. Add new blog to server database.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "Title for the blog.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "tags",
            "in": "formData",
            "description": "Tags for tags.Please provide tags as string.e.g: test,test1",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "Body of the blog.Please also provide the html.If you are using Html. ",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "category id for the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "formData",
            "description": "Search settings for blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "draft",
            "in": "formData",
            "description": "Set 0 if you want to publish the blog and 1 if you want to dreaft the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_view",
            "in": "formData",
            "description": "auth view settings for the blog",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "formData",
            "description": "auth comment setting for the blog.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Create a new blog on server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/blogs/post/comment": {
      "post": {
        "summary": "postComment",
        "description": "Create a request to add a comment.",
        "parameters": [
          {
            "name": "objectId",
            "in": "formData",
            "description": "Blog id of the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "body of the blog.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Create a new blog on server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/blogs/post/like": {
      "post": {
        "summary": "postlike",
        "description": "Create a request to add a like/unlike on blog.",
        "parameters": [
          {
            "name": "objectId",
            "in": "formData",
            "description": "Blog id of the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "formData",
            "description": "like is true or false.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Create a new blog on server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/blogs/post/commentLike": {
      "post": {
        "summary": "postCommentLike",
        "description": "Create a request to add a like/unlike on blog.",
        "parameters": [
          {
            "name": "commentId",
            "in": "formData",
            "description": "comment id of the comment.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "formData",
            "description": "like is true or false.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Create a new blog on server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/blogs/put/blog": {
      "put": {
        "summary": "editBlog",
        "description": "Create a request to edit new blog to server. Send put request with blog parameters.",
        "parameters": [
          {
            "name": "blogId",
            "in": "formData",
            "description": "Blog id of the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Title for the blog.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "tags",
            "in": "formData",
            "description": "Tags for tags.Please provide tags as string.e.g: test,test1",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "Body of the blog.Please also provide the html.If you are using Html. ",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "category id for the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "formData",
            "description": "Search settings for blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "draft",
            "in": "formData",
            "description": "Set 0 if you want to publish the blog and 1 if you want to dreaft the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_view",
            "in": "formData",
            "description": "auth view settings for the blog",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "formData",
            "description": "auth comment setting for the blog.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Edit blog details at server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Edit blog details at server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/blogs/delete/blog": {
      "delete": {
        "summary": "deleteBlog",
        "description": "Create a request to remove blog from server.",
        "parameters": [
          {
            "name": "blogId",
            "in": "query",
            "description": "blog id of the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Delete blog from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete blog from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/blogs/delete/comment": {
      "delete": {
        "summary": "deleteComment",
        "description": "Create a request to remove comment from blog from server.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "comment id of the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "blogId",
            "in": "query",
            "description": "blog id of the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Blog"
        ],
        "responses": {
          "200": {
            "description": "Delete blog's comment from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete blog's comment from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/get/forums": {
      "get": {
        "summary": "list of Forum",
        "description": "Request for all forums list. Send get request and return forum list.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Show list of forums",
            "schema": {
              "$ref": "#/definitions/ForumGetList"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of forums",
            "schema": {
              "$ref": "#/definitions/ForumGetList"
            }
          }
        }
      }
    },
    "/socialapi/forum/get/topics": {
      "get": {
        "summary": "list of Topic",
        "description": "Request for all topics list of a particular forum. Send get request and return forum list.",
        "parameters": [
          {
            "name": "forumId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Show list of forum topics",
            "schema": {
              "$ref": "#/definitions/ForumGetTopics"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of forum topics",
            "schema": {
              "$ref": "#/definitions/ForumGetTopics"
            }
          }
        }
      }
    },
    "/socialapi/forum/get/posts": {
      "get": {
        "summary": "list of posts",
        "description": "Request for all posts list of a particular possts. Send get request and return forum list.",
        "parameters": [
          {
            "name": "forumId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Show list of topic posts",
            "schema": {
              "$ref": "#/definitions/ForumPosts"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of topic posts",
            "schema": {
              "$ref": "#/definitions/ForumPosts"
            }
          }
        }
      }
    },
    "/socialapi/forum/post/topic": {
      "post": {
        "summary": "createTopic",
        "description": "Create a request to add new topic to the forum on server. Send post request with topic parameters.",
        "parameters": [
          {
            "name": "forumId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Title for the forum.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "Body of the blog.Please also provide the html.If you are using Html. ",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "formData",
            "description": "watch is set to 1 if you want to follow the topic and add 0 if no",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Created a forum topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Created a forum topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/post/post": {
      "post": {
        "summary": "createTopic",
        "description": "Create a request to add new post to the topic on server. Send post request with post parameters.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "Body of the blog.Please also provide the html.If you are using Html. ",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "formData",
            "description": "watch is set to 1 if you want to follow the topic and add 0 if no",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Created a topic post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Created a topic post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/put/topic": {
      "put": {
        "summary": "editTopic",
        "description": "Create a request to edit topic to the forum on server. Send put request with topic parameters.",
        "parameters": [
          {
            "name": "forumId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Title for the forum.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "Body of the blog.Please also provide the html.If you are using Html. ",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "formData",
            "description": "watch is set to 1 if you want to follow the topic and add 0 if no",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Edited a forum topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Edited a forum topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/put/post": {
      "put": {
        "summary": "editPost",
        "description": "Create a request to edit post to the topic on server. Send post request with post parameters.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "postId",
            "in": "query",
            "description": "post id of the post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "Body of the blog.Please also provide the html.If you are using Html. ",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "formData",
            "description": "watch is set to 1 if you want to follow the topic and add 0 if no",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Edited a topic post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Edited a topic post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/put/close": {
      "put": {
        "summary": "editClose",
        "description": "Create a request to close/open the topic on server. Send post request with post parameters.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "close",
            "in": "query",
            "description": "close set to 1 if you want to close the topic and 0 if you want to open.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Closed/Open the topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Closed/Open the topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/put/sticky": {
      "put": {
        "summary": "stickyTopic",
        "description": "Create a request to make and remove sticky the topic on server. Send post request with post parameters.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "sticky set to 1 if you want to make the topic stricky and 0 if you want to remove.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Make and remove the topic sticky.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Make and removed the topic sticky.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/put/watch": {
      "put": {
        "summary": "watchTopic",
        "description": "Create a request to start and stop watching the topic on server.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "forum id of the forum.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "watch",
            "in": "query",
            "description": "watch set to 1 if you want to start watching topic  and 0 if you want to stop watching.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Stop and start watching the topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Stop and start watching the topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/delete/topic": {
      "delete": {
        "summary": "deleteTopic",
        "description": "Create a request to remove topic from server.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Delete the topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete the topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/forum/delete/post": {
      "delete": {
        "summary": "deletePost",
        "description": "Create a request to remove post from server.",
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "description": "post id of the topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Forum"
        ],
        "responses": {
          "200": {
            "description": "Delete the post from topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete the post from topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/member/get/profile": {
      "get": {
        "summary": "Profile",
        "description": "Send request for profile information of the user. Return user profile information based on the unique identifier.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "UserId of the user.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Get user profile information based on the unique identifier.",
            "schema": {
              "$ref": "#/definitions/UserProfileGetProfile"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/member/get/userinfo": {
      "get": {
        "summary": "User Info",
        "description": "Send request for profile information of the user. Return user profile information based on the unique identifier.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "UserId of the user.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Get user profile information based on the unique identifier.",
            "schema": {
              "$ref": "#/definitions/UserProfileGetProfile"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/member/get/mobileinfo": {
      "get": {
        "summary": "User Mobile Info",
        "description": "Send request for mobile information of the user.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Get user mobile information based on the unique identifier.",
            "schema": {
              "$ref": "#/definitions/UserProfileGetMobile"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/member/get/profileimagelikes": {
      "get": {
        "summary": "Profile Likes",
        "description": "Create a request for profile picture likes. Return likes for given profile picture.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "description": "Id of the profile picture.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a request for profile picture likes.",
            "schema": {
              "$ref": "#/definitions/UserProfileGetImageLikes"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for profile picture likes.",
            "schema": {
              "$ref": "#/definitions/UserProfileGetImageLikes"
            }
          }
        }
      }
    },
    "/socialapi/member/get/profileimagecomments": {
      "get": {
        "summary": "Profile Comments",
        "description": "Create a request for profile picture comments. Return comments for given profile picture.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "description": "Id of the profile picture.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a request for profile picture likes.",
            "schema": {
              "$ref": "#/definitions/MemberGetProfileComments"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for profile picture comments.",
            "schema": {
              "$ref": "#/definitions/MemberGetProfileComments"
            }
          }
        }
      }
    },
    "/socialapi/member/post/profile": {
      "post": {
        "summary": "editProfile",
        "description": "Create edit profile request for the logged in user. Send edit information to server thorugh post request.",
        "parameters": [
          {
            "name": "profileFields['1_2_3']",
            "in": "formData",
            "description": "Profile Fields First Name of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileFields['1_2_4']",
            "in": "formData",
            "description": "Profile Fields Last Name of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileFields['1_2_5']",
            "in": "formData",
            "description": "Profile Fields Gender of the account. 2 for Male and 3 for Female",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "profileFields['1_2_13']",
            "in": "formData",
            "description": "Profile Fields About us of the account.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a editProfile resources",
            "schema": {
              "$ref": "#/definitions/UserProfilePostProfile"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/member/post/profilePhoto": {
      "post": {
        "summary": "profilePhoto",
        "description": "Create a request for profile photo and send photo to server through post request.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "UserId of the user.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "data",
            "in": "query",
            "description": "file data of the user.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a Profile photo resources",
            "schema": {
              "$ref": "#/definitions/UserProfilePostProfile"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/member/post/profileimagecomment": {
      "post": {
        "summary": "Profile Comment",
        "description": "Create a request for profile picture comment.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "description": "Id of the profile picture.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the viewer or user.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "text",
            "in": "query",
            "description": "comment text for the profile picture.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a request for profile picture comment.",
            "schema": {
              "$ref": "#/definitions/MemberPostProfileComment"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for profile picture comment.",
            "schema": {
              "$ref": "#/definitions/MemberPostProfileComment"
            }
          }
        }
      }
    },
    "/socialapi/member/post/profileimagelike": {
      "post": {
        "summary": "Profile Like",
        "description": "Create a request for profile picture like.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "description": "Id of the profile picture.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the viewer or user.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a request for profile picture like.",
            "schema": {
              "$ref": "#/definitions/MemberPostProfileLike"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for profile picture like.",
            "schema": {
              "$ref": "#/definitions/MemberPostProfileLike"
            }
          }
        }
      }
    },
    "/socialapi/member/post/unlikeprofilephoto": {
      "post": {
        "summary": "Profile Like",
        "description": "Create a request for profile picture like.",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "description": "Id of the profile picture.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the viewer or user.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a request for profile picture like.",
            "schema": {
              "$ref": "#/definitions/MemberPostProfileLike"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for profile picture like.",
            "schema": {
              "$ref": "#/definitions/MemberPostProfileLike"
            }
          }
        }
      }
    },
    "/socialapi/member/put/removePhoto": {
      "put": {
        "summary": "removePhoto",
        "description": "Create a request to remove photo for the logged in user. Photo will be removed from the server through put request.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a remove profile resources",
            "schema": {
              "$ref": "#/definitions/UserProfileRemovePhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/member/put/deletecommentprofilephoto": {
      "put": {
        "summary": "Remove ProfilePhoto Comment",
        "description": "Create a request to remove profile photo comment for the profile picture. Photo comment will be removed from the server through put request.",
        "parameters": [
          {
            "name": "commentId",
            "in": "query",
            "description": "comment id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "Create a remove profile resources",
            "schema": {
              "$ref": "#/definitions/UserProfileRemovePhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/activity/get/list": {
      "get": {
        "summary": "Activity",
        "description": "Create a request for activities feed based on subject and object information given at the time of request. Return list of activities feed to the user.",
        "parameters": [
          {
            "name": "subjectType",
            "in": "query",
            "description": "Type of the subject.This parameter helps to show userprofile feeds.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "subjetcId",
            "in": "query",
            "description": "Subject id of the subject. This parameter helps to show the userprofile feeds.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "Typeof the object . This parameter helps to show object feeds.for e.g any event updates.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "objectId",
            "in": "query",
            "description": "Object id of object. This parameter helps to show object feeds.for e.g any event updates.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "List of activities feed.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetList"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Default Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "List of activities feed.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetList"
            }
          }
        }
      }
    },
    "/socialapi/activity/get/comments": {
      "get": {
        "summary": "Comments",
        "description": "Create a request for activity comments. Return comments available for given activity feed.",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for activity comments.",
            "schema": {
              "$ref": "#/definitions/ActivityComments"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for activity comments.",
            "schema": {
              "$ref": "#/definitions/ActivityComments"
            }
          }
        }
      }
    },
    "/socialapi/activity/get/itemcomments": {
      "get": {
        "summary": "Comments",
        "description": "Create a request for activity comments. Return comments available for given activity feed.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "Id of the object.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "Id of the object.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for activity comments.",
            "schema": {
              "$ref": "#/definitions/ActivityComments"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for activity comments.",
            "schema": {
              "$ref": "#/definitions/ActivityComments"
            }
          }
        }
      }
    },
    "/socialapi/activity/get/likes": {
      "get": {
        "summary": "Likes",
        "description": "Create a request for activity likes. Return likes for given activity feed.",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for activity likes.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetLikes"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for activity likes.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetLikes"
            }
          }
        }
      }
    },
    "/socialapi/activity/get/itemlikes": {
      "get": {
        "summary": "Likes",
        "description": "Create a request for activity likes. Return likes for given activity feed.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "Id of the Object.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "Type of the Object.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for activity likes.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetLikes"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for activity likes.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetLikes"
            }
          }
        }
      }
    },
    "/socialapi/activity/get/enablemodule": {
      "get": {
        "summary": "Enable Modules",
        "description": "Create a request for enable modules. Return enable module for activity feed.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for enable activity modules.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetEnableModules"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for enable activity modules.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedGetEnableModules"
            }
          }
        }
      }
    },
    "/socialapi/activity/post/activity": {
      "post": {
        "summary": "addActivity",
        "description": "Create a post request for adding new activity. Take two parameters text and status, add new activity feed to server.",
        "parameters": [
          {
            "name": "text",
            "in": "formData",
            "description": "text for the activity post.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "actionType",
            "in": "formData",
            "description": "action type for the activity post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "uri",
            "in": "formData",
            "description": "Uri for link or video type activity post.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "Type for video . e.g. youtube = 1, vimeo = 2.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "objectType",
            "in": "formData",
            "description": "Type for video . e.g. youtube = 1, vimeo = 2.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "objectId",
            "in": "formData",
            "description": "Type for video . e.g. youtube = 1, vimeo = 2.",
            "required": false,
            "type": "integer",
            "format": "text"
          },
          {
            "name": "data",
            "in": "formData",
            "description": "base 64 data of video",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "video_name",
            "in": "formData",
            "description": "Name for uploaded video",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a post request for new activity.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostActivity"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a post request for new activity.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostActivity"
            }
          }
        }
      }
    },
    "/socialapi/activity/post/share": {
      "post": {
        "summary": "Share",
        "description": "Create a request for activity share. Share the activity for logged in user and show at user's activity feeds.",
        "parameters": [
          {
            "name": "linkId",
            "in": "formData",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "Type of the share item e.g. group, link etc.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "body text for the share.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for activity share.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostShare"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for activity share.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostShare"
            }
          }
        }
      }
    },
    "/socialapi/activity/post/shareitem": {
      "post": {
        "summary": "Share",
        "description": "Create a request for share an item activity. Share the item like group, blog, event etc in user.",
        "parameters": [
          {
            "name": "objectId",
            "in": "formData",
            "description": "object Id of the object.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "objectType",
            "in": "formData",
            "description": "Type of the share item e.g. group, link etc.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "body text for the share.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for activity share.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostShare"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for activity share.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostShare"
            }
          }
        }
      }
    },
    "/socialapi/activity/post/comment": {
      "post": {
        "summary": "Comment",
        "description": "Create a request for activity comment. Add a comment to the activity feed.",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "text",
            "in": "query",
            "description": "text for the comment body.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a reqeust for comment to an activity.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostComment"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a reqeust for comment to an activity.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostComment"
            }
          }
        }
      }
    },
    "/socialapi/activity/post/likeComment": {
      "post": {
        "summary": "commentLike",
        "description": "Create a request for comment like. Add a like for an activity comment.",
        "parameters": [
          {
            "name": "commentId",
            "in": "query",
            "description": "comment Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "query",
            "description": "True or false value for like.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for comment like.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostLikeComment"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for comment like.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostLikeComment"
            }
          }
        }
      }
    },
    "/socialapi/activity/post/like": {
      "post": {
        "summary": "Like",
        "description": "Create a request for activity likes. Return likes for given activity feed.",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "query",
            "description": "True or false value for like.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Create a request for activity like.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostLike"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request for activity like.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedPostLike"
            }
          }
        }
      }
    },
    "/socialapi/activity/delete/activity": {
      "delete": {
        "summary": "Activity Delete",
        "description": "Create a delete request to remove an activity from server. ",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Delete activity request from server.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedDeleteActivity"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete activity request from server.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedDeleteActivity"
            }
          }
        }
      }
    },
    "/socialapi/activity/delete/comment": {
      "delete": {
        "summary": "Comment Delete",
        "description": "Create a delete request to remove a comment for an activity.Delete the comment from the server.",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "commentId",
            "in": "query",
            "description": "comment Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Delete comment from the server.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedDeleteComment"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete comment from the server.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedDeleteComment"
            }
          }
        }
      }
    },
    "/socialapi/activity/block": {
      "get": {
        "summary": "Activity Block",
        "description": "Create a delete request to remove an activity from server. ",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Activity block successfully.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedBlock"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Activity block successfully.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedBlock"
            }
          }
        }
      }
    },
    "/socialapi/activity/spam": {
      "get": {
        "summary": "Activity Spam",
        "description": "Create a delete request to remove an activity from server. ",
        "parameters": [
          {
            "name": "actionId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the loggedin user.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Activity Feed"
        ],
        "responses": {
          "200": {
            "description": "Activity spam successfully.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedSpam"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Activity spam successfully.",
            "schema": {
              "$ref": "#/definitions/ActivityFeedSpam"
            }
          }
        }
      }
    },
    "/socialapi/message/get/inbox": {
      "get": {
        "summary": "Inbox",
        "description": "Create a get request to fetch messages from user inbox. Returns available messages list to the user",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "description": "Number of the page..",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "ItemPerPage",
            "in": "query",
            "description": "Number of events wanted to display. Maximum 50 events in a page.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset for the database result. @event_id = 1(number) ... Unique identifier for the event",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Return messages list for logged in user.",
            "schema": {
              "$ref": "#/definitions/MessageGetInbox"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Return messages list for logged in user.",
            "schema": {
              "$ref": "#/definitions/MessageGetInbox"
            }
          }
        }
      }
    },
    "/socialapi/message/get/outbox": {
      "get": {
        "summary": "Outbox",
        "description": "Create a get request to fetch messages from user outbox. Returns available outbox messages list to the user",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "description": "Number of the page..",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "itemPerPage",
            "in": "query",
            "description": "Number of events wanted to display. Maximum 50 events in a page.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset for the database result. @event_id = 1(number) ... Unique identifier for the event",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Return available outbox messages for the logged in user.",
            "schema": {
              "$ref": "#/definitions/MessageGetOutbox"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Return available outbox messages for the logged in user.",
            "schema": {
              "$ref": "#/definitions/MessageGetOutbox"
            }
          }
        }
      }
    },
    "/socialapi/message/get/conversation": {
      "get": {
        "summary": "Conversation",
        "description": "Create a get request to fetch message conversation list. Returns available conversation list to the user",
        "parameters": [
          {
            "name": "pageId",
            "in": "query",
            "description": "Number of the page..",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "itemPerPage",
            "in": "query",
            "description": "Number of events wanted to display. Maximum 50 events in a page.e.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset for the database result. @event_id = 1(number) ... Unique identifier for the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "conversationId",
            "in": "query",
            "description": "conversation id.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "user id of the user with whom you are having conversation.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Return conversation list available for logged in user.",
            "schema": {
              "$ref": "#/definitions/MessageGetConversation"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Return conversation list available for logged in user.",
            "schema": {
              "$ref": "#/definitions/MessageGetConversation"
            }
          }
        }
      }
    },
    "/socialapi/message/post/compose": {
      "post": {
        "summary": "Compose",
        "description": "Create a request to send post message to a user. Submit the message to server.",
        "parameters": [
          {
            "name": "to",
            "in": "query",
            "description": "user ids.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of the message",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "query",
            "description": "body of the message.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Add new message to server.",
            "schema": {
              "$ref": "#/definitions/MessagePostCompose"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Add new message to server.",
            "schema": {
              "$ref": "#/definitions/MessagePostCompose"
            }
          }
        }
      }
    },
    "/socialapi/message/post/reply": {
      "post": {
        "summary": "Reply",
        "description": "Request to send reply for a message. Send reply to server.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "query",
            "description": "conversation Id of the message.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "query",
            "description": "body fo the reply.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Add reply for a message to server.",
            "schema": {
              "$ref": "#/definitions/MessagePostReply"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Add reply for a message to server.",
            "schema": {
              "$ref": "#/definitions/MessagePostReply"
            }
          }
        }
      }
    },
    "/socialapi/message/delete/message": {
      "delete": {
        "summary": "Messages Delete",
        "description": "Create a request to delete message. Delete the message from the server.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "query",
            "description": "comma separated conversation ids.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Delete message from the server.",
            "schema": {
              "$ref": "#/definitions/MessageDeleteMessage"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete message from the server.",
            "schema": {
              "$ref": "#/definitions/MessageDeleteMessage"
            }
          }
        }
      }
    },
    "/socialapi/settings/post/general": {
      "post": {
        "summary": "General",
        "description": "Create a request to save general setting of the logged in user. Send request and save setting at server.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "email value for email setiing.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "profileAddress",
            "in": "query",
            "description": "profile address for the user.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Save general settings for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/get/privacy": {
      "get": {
        "summary": "getPrivacy",
        "description": "Create a request to save privacy setting of the logged in user. Send request and save setting at server.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Save privacy settings for logged in user.",
            "schema": {
              "$ref": "#/definitions/SettingGetPrivacy"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/post/privacy": {
      "post": {
        "summary": "setPrivacy",
        "description": "Create a request to set privacy setting of the logged in user. Send request and save setting at server.",
        "parameters": [
          {
            "name": "blockList",
            "in": "query",
            "description": "block list values.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "search",
            "in": "query",
            "description": "search value of the privacy.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "privacy",
            "in": "query",
            "description": "privacy value for the privacy setting.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment value for the comment settings",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "publishTypes",
            "in": "query",
            "description": "publish types value for publish settings.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Set privacy settings for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/get/notification": {
      "get": {
        "description": "Create a request to get all notifications avaialble for the logged in user.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Get all notifications for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/post/notification": {
      "post": {
        "summary": "Notification",
        "description": "Create a request to save notification setting of the logged in user. Send request and save setting at server.",
        "parameters": [
          {
            "name": "notifications",
            "in": "query",
            "description": "notifications comma separated list.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Save notification settings for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/post/readnotification": {
      "post": {
        "summary": "Notification",
        "description": "Create a request to read notification for the logged in user.",
        "parameters": [
          {
            "name": "notificationtId",
            "in": "query",
            "description": "notification_id of the notificaion.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Read notification for logged in user."
          }
        }
      }
    },
    "/socialapi/settings/get/network": {
      "get": {
        "description": "Create a request to get all networks avaialble for the logged in user.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Get all networks for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/post/network": {
      "post": {
        "summary": "Network",
        "description": "Create a request to save network setting of the logged in user. Send request and save setting at server.",
        "parameters": [
          {
            "name": "networkId",
            "in": "query",
            "description": "network Id of the network.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status of network.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Save network settings for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/post/password": {
      "post": {
        "summary": "password",
        "description": "Create a request to save password for the logged in user.",
        "parameters": [
          {
            "name": "oldpassword",
            "in": "query",
            "description": "old password of the user.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "password",
            "in": "query",
            "description": "new password of the user.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "passwordconfirm",
            "in": "query",
            "description": "confirm password of the user.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Save password for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/post/block": {
      "post": {
        "summary": "block",
        "description": "Create a request to save block setting of the logged in user. Send request and save setting at server.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "block",
            "in": "query",
            "description": "block value.",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "Save block settings for logged in user."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/settings/post/checkmobile": {
      "post": {
        "summary": "Mobile Signup",
        "description": "Send an OTP to given Mobile Number. The request contains mobile no of the user.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mobileno",
            "in": "formData",
            "description": "Mobile No. eg. +919876543210",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "formData",
            "description": "device id of the phone",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "OTP sent successfull",
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          },
          "400": {
            "description": "Mobile number not valid number"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "404": {
            "description": "OTP sent failed"
          }
        }
      }
    },
    "/socialapi/settings/post/syncmobile": {
      "post": {
        "summary": "Mobile Signup",
        "description": "Send a Mobile Signup after verification request to the server. The request contains mobile no and otp sent to that mobile no of the user.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mobileno",
            "in": "formData",
            "description": "Mobile No. eg. +919876543210",
            "required": true,
            "type": "string"
          },
          {
            "name": "otp",
            "in": "formData",
            "description": "Enter OTP",
            "required": true,
            "type": "number"
          },
          {
            "name": "deviceId",
            "in": "formData",
            "description": "device id of the phone",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "deviceType",
            "in": "formData",
            "description": "device type of the phone. e.g. ios or anodroid",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Settings"
        ],
        "responses": {
          "200": {
            "description": "User number has been synced successfully",
            "schema": {
              "$ref": "#/definitions/AuthLogin"
            }
          },
          "400": {
            "description": "Data missmatch"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/member/get/list": {
      "get": {
        "summary": "memberList",
        "description": "Request to get member list. Search the online members and return list of them.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name parameter for search members.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "page id of the list.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset of the list.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "itemPerPage",
            "in": "query",
            "description": "itemPerPage of the list.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Return online members list.",
            "schema": {
              "$ref": "#/definitions/MemberGetList"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Return online members list.",
            "schema": {
              "$ref": "#/definitions/MemberGetList"
            }
          }
        }
      }
    },
    "/socialapi/member/get/notifications": {
      "get": {
        "summary": "notifications",
        "description": "Get all notifications available for member.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "List down all available notifications.",
            "schema": {
              "$ref": "#/definitions/MemberGetNotifications"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "List down all available notifications.",
            "schema": {
              "$ref": "#/definitions/MemberGetNotifications"
            }
          }
        }
      }
    },
    "/socialapi/member/get/blockmembers": {
      "get": {
        "summary": "blockmembers",
        "description": "Get all notifications available for member.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "List down all block members.",
            "schema": {
              "$ref": "#/definitions/MemberGetBlockMembers"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "List down all block members.",
            "schema": {
              "$ref": "#/definitions/MemberGetBlockMembers"
            }
          }
        }
      }
    },
    "/socialapi/member/get/friends": {
      "get": {
        "summary": "friends",
        "description": "Get list of all friends for given unique user identifier.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Get list of friends.",
            "schema": {
              "$ref": "#/definitions/MemberGetFriends"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get list of friends.",
            "schema": {
              "$ref": "#/definitions/MemberGetFriends"
            }
          }
        }
      }
    },
    "/socialapi/member/get/fields": {
      "get": {
        "summary": "fields",
        "description": "Get list of all fields for given unique user identifier.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "profileType",
            "in": "query",
            "description": "profile type  of the member.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Get list of fields.",
            "schema": {
              "$ref": "#/definitions/MemberGetFields"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get list of fields.",
            "schema": {
              "$ref": "#/definitions/MemberGetFields"
            }
          }
        }
      }
    },
    "/socialapi/user/get/networkStats": {
      "get": {
        "summary": "networkStats",
        "description": "Get all available networks to specific user.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Get list of all available networks.",
            "schema": {
              "$ref": "#/definitions/MemberGetNetworkStats"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get list of all available networks.",
            "schema": {
              "$ref": "#/definitions/MemberGetNetworkStats"
            }
          }
        }
      }
    },
    "/socialapi/member/get/friendship": {
      "get": {
        "summary": "getFriendship",
        "description": "Get all notifications related with friendship.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Get all friendship notifications list.",
            "schema": {
              "$ref": "#/definitions/MemberGetFriendship"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get all friendship notifications list.",
            "schema": {
              "$ref": "#/definitions/MemberGetFriendship"
            }
          }
        }
      }
    },
    "/socialapi/member/post/addFriend": {
      "post": {
        "summary": "addfriend",
        "description": "Create a add friend resources. Send request to spcific user to become friend.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Create a add friend request and add friend to friend list.",
            "schema": {
              "$ref": "#/definitions/MemberPostAddFriend"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a add friend request and add friend to friend list.",
            "schema": {
              "$ref": "#/definitions/MemberPostAddFriend"
            }
          }
        }
      }
    },
    "/socialapi/member/post/removeFriend": {
      "post": {
        "summary": "removeFriend",
        "description": "Create a remove friend request. Remove friend from the user's friend ist.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Create a remove friend resource and remove friend from friend list.",
            "schema": {
              "$ref": "#/definitions/MemberPostRemoveFriend"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a remove friend resource and remove friend from friend list.",
            "schema": {
              "$ref": "#/definitions/MemberPostRemoveFriend"
            }
          }
        }
      }
    },
    "/socialapi/member/post/confirmFriend": {
      "post": {
        "summary": "confirmFriend",
        "description": "Create a request to confirm a friend request. Send confirmation request to server and add friend to friend list.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Confirm friend request and add user to friend list.",
            "schema": {
              "$ref": "#/definitions/MemberPostConfirmFriend"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Confirm friend request and add user to friend list.",
            "schema": {
              "$ref": "#/definitions/MemberPostConfirmFriend"
            }
          }
        }
      }
    },
    "/socialapi/member/post/cancelFriend": {
      "post": {
        "summary": "cancelFriend",
        "description": "Create a request to cancel friend request. Remove specific friend request from server.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Create a cancel friend request.",
            "schema": {
              "$ref": "#/definitions/MemberPostCancelFriend"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a cancel friend request.",
            "schema": {
              "$ref": "#/definitions/MemberPostCancelFriend"
            }
          }
        }
      }
    },
    "/socialapi/member/post/notification": {
      "post": {
        "summary": "notification",
        "description": "Get list of notifications availble for specific user. Send request to server with unique user identifier and return list of notifications avaialble to user.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id of the member.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Member"
        ],
        "responses": {
          "200": {
            "description": "Create a request to fetch available notifications for specific user.",
            "schema": {
              "$ref": "#/definitions/MemberPostNotification"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a request to fetch available notifications for specific user.",
            "schema": {
              "$ref": "#/definitions/MemberPostNotification"
            }
          }
        }
      }
    },
    "/socialapi/album/get/albums": {
      "get": {
        "summary": "albumns",
        "description": "Request for list of all available albums. Show list of all available albums at server.",
        "parameters": [
          {
            "name": "subject",
            "in": "query",
            "description": "subject type.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "subjectId",
            "in": "query",
            "description": "subject Id.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Get list of all available albums at server.",
            "schema": {
              "$ref": "#/definitions/AlbumGetAlbums"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get list of all available albums at server.",
            "schema": {
              "$ref": "#/definitions/AlbumGetAlbums"
            }
          }
        }
      }
    },
    "/socialapi/album/get/albumdetails": {
      "get": {
        "summary": "Album Details",
        "description": "Request for details of album.",
        "parameters": [
          {
            "name": "albumId",
            "in": "query",
            "description": "Album Id of the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Get details of album at server.",
            "schema": {
              "$ref": "#/definitions/AlbumGetAlbumDetails"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get list of all available albums at server.",
            "schema": {
              "$ref": "#/definitions/AlbumGetAlbumDetails"
            }
          }
        }
      }
    },
    "/socialapi/album/get/photos": {
      "get": {
        "summary": "photos",
        "description": "Request to get all photos avaiable in the album. Show list of all photos specific to given album unique identifier.",
        "parameters": [
          {
            "name": "albumId",
            "in": "query",
            "description": "album id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "page id of the list.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset of the list.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "itemPerPage",
            "in": "query",
            "description": "itemPerPage of the list.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Get all photos available in an album",
            "schema": {
              "$ref": "#/definitions/AlbumGetPhotos"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get all photos available in an album",
            "schema": {
              "$ref": "#/definitions/AlbumGetPhotos"
            }
          }
        }
      }
    },
    "/socialapi/album/get/comments": {
      "get": {
        "summary": "comments",
        "description": "Request for album's comments.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "album id of album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "object type is album.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Request for album comments.",
            "schema": {
              "$ref": "#/definitions/AlbumGetComments"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request for album comments.",
            "schema": {
              "$ref": "#/definitions/AlbumGetComments"
            }
          }
        }
      }
    },
    "/socialapi/album/get/photoComments": {
      "get": {
        "summary": "photoComments",
        "description": "Request for album photo's comments.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "photo id of album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "object type is album_photo.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Request for album photo comments.",
            "schema": {
              "$ref": "#/definitions/AlbumGetPhotoComments"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request for album photo comments.",
            "schema": {
              "$ref": "#/definitions/AlbumGetPhotoComments"
            }
          }
        }
      }
    },
    "/socialapi/album/get/form": {
      "get": {
        "summary": "form",
        "description": "Request for create album form. Show form with all available fields to create new album.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Request for form with all available fields required for creating new album.",
            "schema": {
              "$ref": "#/definitions/AlbumGetForm"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request for form with all available fields required for creating new album.",
            "schema": {
              "$ref": "#/definitions/AlbumGetForm"
            }
          }
        }
      }
    },
    "/socialapi/album/get/photo": {
      "get": {
        "summary": "photo",
        "description": "Create a album's photo request. Fetch and show list of all photos available in album.",
        "parameters": [
          {
            "name": "photoId",
            "in": "query",
            "description": "photo id of the album photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Request to show all available photos in the album.",
            "schema": {
              "$ref": "#/definitions/AlbumGetPhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request to show all available photos in the album.",
            "schema": {
              "$ref": "#/definitions/AlbumGetPhoto"
            }
          }
        }
      }
    },
    "/socialapi/album/get/category": {
      "get": {
        "summary": "category",
        "description": "Create a album's category resources. Fetch and show all available categories for an album.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a category resources for album.",
            "schema": {
              "$ref": "#/definitions/AlbumGetCategory"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a category resources for album.",
            "schema": {
              "$ref": "#/definitions/AlbumGetCategory"
            }
          }
        }
      }
    },
    "/socialapi/album/post/album": {
      "post": {
        "summary": "addAlbum",
        "description": "Create an add album request. Send parameters and add new album to server.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "title for the album",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "category id for the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "data",
            "in": "formData",
            "description": "file data for the album",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "description for the aclbum.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "search",
            "in": "formData",
            "description": "search setting for the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_view",
            "in": "formData",
            "description": "auth viewe setting for the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "formData",
            "description": "auth comment setting for the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_tag",
            "in": "formData",
            "description": "auth tag setting for the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a add album resources",
            "schema": {
              "$ref": "#/definitions/AlbumPostAlbum"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a add album resources",
            "schema": {
              "$ref": "#/definitions/AlbumPostAlbum"
            }
          }
        }
      }
    },
    "/socialapi/album/post/photo": {
      "post": {
        "summary": "updatePhoto",
        "description": "Create a update photo resources for an album. Update photo information related to specific album.",
        "parameters": [
          {
            "name": "albumId",
            "in": "query",
            "description": "album id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "data",
            "in": "query",
            "description": "file data for the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a update photo resources",
            "schema": {
              "$ref": "#/definitions/AlbumPostPhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a update photo resources",
            "schema": {
              "$ref": "#/definitions/AlbumPostPhoto"
            }
          }
        }
      }
    },
    "/socialapi/album/post/comment": {
      "post": {
        "summary": "postComment",
        "description": "Create a request to add a comment.",
        "parameters": [
          {
            "name": "objectId",
            "in": "formData",
            "description": "Album id of the blog.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "body of the comment.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a new comment on album.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new comment on album",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/album/post/like": {
      "post": {
        "summary": "postlike",
        "description": "Create a request to add a like/unlike on album.",
        "parameters": [
          {
            "name": "objectId",
            "in": "formData",
            "description": "Album id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "formData",
            "description": "like is true or false.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a new like  .",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/album/post/commentLike": {
      "post": {
        "summary": "postCommentLike",
        "description": "Create a request to add a like/unlike on album.",
        "parameters": [
          {
            "name": "commentId",
            "in": "formData",
            "description": "comment id of the comment.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "formData",
            "description": "like is true or false.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a new blog on server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/album/post/photoComment": {
      "post": {
        "summary": "postComment",
        "description": "Create a request to add a comment.",
        "parameters": [
          {
            "name": "objectId",
            "in": "formData",
            "description": "photo id of the photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "body of the comment.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a new comment on album.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new comment on album",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/album/post/photoLike": {
      "post": {
        "summary": "photoLike",
        "description": "Create a request to add a like/unlike on album.",
        "parameters": [
          {
            "name": "objectId",
            "in": "formData",
            "description": "Photo id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "formData",
            "description": "like is true or false.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a new like  .",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/album/post/photocommentLike": {
      "post": {
        "summary": "photocommentLike",
        "description": "Create a request to add a like/unlike on album.",
        "parameters": [
          {
            "name": "commentId",
            "in": "formData",
            "description": "comment id of the comment.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "like",
            "in": "formData",
            "description": "like is true or false.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a new blog on server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a new blog on server..",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/album/put/album": {
      "put": {
        "summary": "editAlbumn",
        "description": "Create a edit album info request. SEnd updated information and save to server.",
        "parameters": [
          {
            "name": "albumId",
            "in": "query",
            "description": "album id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "title",
            "in": "query",
            "description": "title for the album",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "category id for the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "data",
            "in": "query",
            "description": "file data for the album",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "description",
            "in": "query",
            "description": "description for the aclbum.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "search",
            "in": "query",
            "description": "search setting for the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_view",
            "in": "query",
            "description": "auth viewe setting for the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "query",
            "description": "auth comment setting for the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_tag",
            "in": "query",
            "description": "auth tag setting for the album.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a edt album information resources",
            "schema": {
              "$ref": "#/definitions/AlbumPutAlbum"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a edt album information resources",
            "schema": {
              "$ref": "#/definitions/AlbumPutAlbum"
            }
          }
        }
      }
    },
    "/socialapi/album/put/profilePhoto": {
      "put": {
        "summary": "profilePhoto",
        "description": "Create a profile photo request.Send and save profile photo for an album.",
        "parameters": [
          {
            "name": "photoId",
            "in": "query",
            "description": "photo id of the album photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a profile photo resources",
            "schema": {
              "$ref": "#/definitions/AlbumPutProfilePhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a profile photo resources",
            "schema": {
              "$ref": "#/definitions/AlbumPutProfilePhoto"
            }
          }
        }
      }
    },
    "/socialapi/album/put/move": {
      "put": {
        "summary": "movophoto",
        "description": "Create a move photo resources of an album. Move photo from album.",
        "parameters": [
          {
            "name": "photoId",
            "in": "query",
            "description": "photo id of the album photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "albumId",
            "in": "query",
            "description": "album id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a move photo resources of an album",
            "schema": {
              "$ref": "#/definitions/AlbumPutMovePhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a move photo resources of an album",
            "schema": {
              "$ref": "#/definitions/AlbumPutMovePhoto"
            }
          }
        }
      }
    },
    "/socialapi/album/delete/album": {
      "delete": {
        "summary": "deletealbumn",
        "description": "Create a remove album resources. Send delete request and delete the album detail from server.",
        "parameters": [
          {
            "name": "albumId",
            "in": "query",
            "description": "album id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a remove album resources.",
            "schema": {
              "$ref": "#/definitions/AlbumDeleteAlbum"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a remove album resources.",
            "schema": {
              "$ref": "#/definitions/AlbumDeleteAlbum"
            }
          }
        }
      }
    },
    "/socialapi/album/delete/photos": {
      "delete": {
        "summary": "deletePhotots",
        "description": "Create a remove photo resources of an album. Send delete request and delete the phtoos from server.",
        "parameters": [
          {
            "name": "photoId",
            "in": "query",
            "description": "photo id of the album photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Create a remove photo resources of an album",
            "schema": {
              "$ref": "#/definitions/AlbumDeletePhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create a remove photo resources of an album",
            "schema": {
              "$ref": "#/definitions/AlbumDeletePhoto"
            }
          }
        }
      }
    },
    "/socialapi/album/delete/comment": {
      "delete": {
        "summary": "deleteComment",
        "description": "Create a request to remove comment from album from server.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "comment id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "albumId",
            "in": "query",
            "description": "Album id of the album.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Delete blog's comment from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete blog's comment from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/album/delete/photoComment": {
      "delete": {
        "summary": "photoComment",
        "description": "Create a request to remove comment from photo from server.",
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "comment id of the photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "photoId",
            "in": "query",
            "description": " Photo id of the photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Album"
        ],
        "responses": {
          "200": {
            "description": "Delete blog's comment from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete blog's comment from server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/events/get/form": {
      "get": {
        "summary": "form",
        "description": "Request for event form parameters. Send post request and return form parameters available for events.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show form parameters available for event.",
            "schema": {
              "$ref": "#/definitions/EventGetForm"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show form parameters available for event.",
            "schema": {
              "$ref": "#/definitions/EventGetForm"
            }
          }
        }
      }
    },
    "/socialapi/events/get/categories": {
      "get": {
        "summary": "categories",
        "description": "Request for all available events categories list. Send post request and return categories available for events.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show list of categories available for event.",
            "schema": {
              "$ref": "#/definitions/EventGetCategory"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of categories available for event.",
            "schema": {
              "$ref": "#/definitions/EventGetCategory"
            }
          }
        }
      }
    },
    "/socialapi/events/get/list": {
      "get": {
        "summary": "list",
        "description": "Request for all events list. Send post request with user id and return events list specific to user id.",
        "parameters": [
          {
            "name": "subject",
            "in": "query",
            "description": "To show the user event.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "subjectId",
            "in": "query",
            "description": "user id of the user which you want to show the event and also add subject parameter.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "time",
            "in": "query",
            "description": "time for the event e,g, past. past for past event and fufure for upcoming events",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show list of topics specific to event id.",
            "schema": {
              "$ref": "#/definitions/EventGetList"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of topics specific to event id.",
            "schema": {
              "$ref": "#/definitions/EventGetList"
            }
          }
        }
      }
    },
    "/socialapi/events/get/detail": {
      "get": {
        "summary": "detail",
        "description": "Request for event's detail information. Send post request with event id and return event detailed information.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event id of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show detail of requested event.",
            "schema": {
              "$ref": "#/definitions/EventGetDetail"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show detail of requested event.",
            "schema": {
              "$ref": "#/definitions/EventGetDetail"
            }
          }
        }
      }
    },
    "/socialapi/events/get/photos": {
      "get": {
        "summary": "photos",
        "description": "Request for all event's photos list. Send post request with event id and return photos specific to event id.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event id of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show list of photos specific to event id.",
            "schema": {
              "$ref": "#/definitions/EventGetPhotos"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of photos specific to event id.",
            "schema": {
              "$ref": "#/definitions/EventGetPhotos"
            }
          }
        }
      }
    },
    "/socialapi/events/get/attendies": {
      "get": {
        "summary": "attendies",
        "description": "Request for all users who attend the event. Send post request with event id and return users list who attend the event.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event id of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "waiting",
            "in": "query",
            "description": "If event owner want ot see the requested member waiting list.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show list of users who attend the event.",
            "schema": {
              "$ref": "#/definitions/EventGetAttendies"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of users who attend the event.",
            "schema": {
              "$ref": "#/definitions/EventGetAttendies"
            }
          }
        }
      }
    },
    "/socialapi/events/get/topics": {
      "get": {
        "summary": "topics",
        "description": "Request for all event's topics list. Send post request with event id and return topics specific to event id.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event id of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show list of topics specific to event id.",
            "schema": {
              "$ref": "#/definitions/EventGetTopics"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of topics specific to event id.",
            "schema": {
              "$ref": "#/definitions/EventGetTopics"
            }
          }
        }
      }
    },
    "/socialapi/events/get/posts": {
      "get": {
        "summary": "topicPosts",
        "description": "Request for event topic posts.Send post request with event id and topic id. Return posts specific to event's topic.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event id of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the vent topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Show list of posts specific to event's topic.",
            "schema": {
              "$ref": "#/definitions/EventGetPosts"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of posts specific to event's topic.",
            "schema": {
              "$ref": "#/definitions/EventGetPosts"
            }
          }
        }
      }
    },
    "/socialapi/events/post/event": {
      "post": {
        "summary": "createEvent",
        "description": "Create a request to add new event to server. Send post request with event parameters. Add new event to server database.",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Title for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "description",
            "in": "query",
            "description": "description for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "data",
            "in": "query",
            "description": "File data for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "start time for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "end time for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "host",
            "in": "query",
            "description": "Host detail for event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Location or address detail for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "category id for the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search settings for event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "approval",
            "in": "query",
            "description": "Approval status for the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_invite",
            "in": "query",
            "description": "Invite settings for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_view",
            "in": "query",
            "description": "auth view settings for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "query",
            "description": "auth comment setting for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_photo",
            "in": "query",
            "description": "auth photo setting for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Create new event at server.",
            "schema": {
              "$ref": "#/definitions/EventPostEvent"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create new event at server.",
            "schema": {
              "$ref": "#/definitions/EventPostEvent"
            }
          }
        }
      }
    },
    "/socialapi/events/post/photo": {
      "post": {
        "summary": "photo",
        "description": "Create a request to event photo. Return photo details of requested event photo.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "data",
            "in": "query",
            "description": "file data for the event photo.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Request for event photo details.",
            "schema": {
              "$ref": "#/definitions/EventPostPhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request for event photo details.",
            "schema": {
              "$ref": "#/definitions/EventPostPhoto"
            }
          }
        }
      }
    },
    "/socialapi/events/post/membership": {
      "post": {
        "summary": "membership",
        "description": "Create a request for event membership. User added to list of waiting for membership approval or become a member of event.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "rsvp",
            "in": "query",
            "description": "rsbp property of the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Request to become member of an event.",
            "schema": {
              "$ref": "#/definitions/EventPostMembership"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request to become member of an event.",
            "schema": {
              "$ref": "#/definitions/EventPostMembership"
            }
          }
        }
      }
    },
    "/socialapi/events/post/approve": {
      "post": {
        "summary": "approve",
        "description": "Create a request to approve an event. Send post request with event parameters. Approve event.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "user id of the user.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "approve",
            "in": "query",
            "description": "set approve property 1.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Send request to approve an event.",
            "schema": {
              "$ref": "#/definitions/EventPostApprove"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Send request to approve an event.",
            "schema": {
              "$ref": "#/definitions/EventPostApprove"
            }
          }
        }
      }
    },
    "/socialapi/events/post/invite": {
      "post": {
        "summary": "invite",
        "description": "Create a request to invite users to join an event. Send post request with event and user lists. Invite sent to selected users list.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "friends",
            "in": "query",
            "description": "user id of friends.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Invite sent to users for an event.",
            "schema": {
              "$ref": "#/definitions/EventPostInvite"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Invite sent to users for an event.",
            "schema": {
              "$ref": "#/definitions/EventPostInvite"
            }
          }
        }
      }
    },
    "/socialapi/events/post/share": {
      "post": {
        "summary": "share",
        "description": "Create a request to share an event. Send post request with event and logged in user parameters and add event to user's share list.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "query",
            "description": "body for the share post.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Share an event with logged in user.",
            "schema": {
              "$ref": "#/definitions/EventPostShare"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Share an event with logged in user.",
            "schema": {
              "$ref": "#/definitions/EventPostShare"
            }
          }
        }
      }
    },
    "/socialapi/events/post/topic": {
      "post": {
        "summary": "topic",
        "description": "Create a request to fetch event topics. Send request with event parameters and show list of topics specific for event profile.",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "title for the topic.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "query",
            "description": "body of the topic.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "query",
            "description": "watch property of the topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Fetch list of topics specific to event profile.",
            "schema": {
              "$ref": "#/definitions/EventPostTopic"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Fetch list of topics specific to event profile.",
            "schema": {
              "$ref": "#/definitions/EventPostTopic"
            }
          }
        }
      }
    },
    "/socialapi/events/post/post": {
      "post": {
        "summary": "post",
        "description": "Create a request to fetch event post. Send request with event parameters and show list of post specific for event profile.",
        "parameters": [
          {
            "name": "body",
            "in": "query",
            "description": "body for the post of the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "query",
            "description": "watch property of the post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the event topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "ref",
            "in": "query",
            "description": "reference url of the topic.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Fetch list of post specific to event profile.",
            "schema": {
              "$ref": "#/definitions/EventPostPost"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Fetch list of post specific to event profile.",
            "schema": {
              "$ref": "#/definitions/EventPostPost"
            }
          }
        }
      }
    },
    "/socialapi/events/put/event": {
      "put": {
        "summary": "editEvent",
        "description": "Create a request to edit event details.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "description",
            "in": "query",
            "description": "description for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "data",
            "in": "query",
            "description": "File data for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "start time for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "end time for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "host",
            "in": "query",
            "description": "Host detail for event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Location or address detail for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "category id for the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search settings for event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "approval",
            "in": "query",
            "description": "Approval status for the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_invite",
            "in": "query",
            "description": "Invite settings for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_view",
            "in": "query",
            "description": "auth view settings for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "query",
            "description": "auth comment setting for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_photo",
            "in": "query",
            "description": "auth photo setting for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Edit event details at server.",
            "schema": {
              "$ref": "#/definitions/EventPutEvent"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Edit event details at server.",
            "schema": {
              "$ref": "#/definitions/EventPutEvent"
            }
          }
        }
      }
    },
    "/socialapi/events/put/post": {
      "put": {
        "summary": "post",
        "description": "Create a topic post for an event.",
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "description": "post id of the event post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "query",
            "description": "text for event post.",
            "required": true,
            "type": "string",
            "format": "string"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Add new topic post for an event.",
            "schema": {
              "$ref": "#/definitions/EventPutPost"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Add new topic post for an event.",
            "schema": {
              "$ref": "#/definitions/EventPutPost"
            }
          }
        }
      }
    },
    "/socialapi/events/put/rsvp": {
      "put": {
        "summary": "rsvp",
        "description": "Create a request for event's rsvp information.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "rsvp",
            "in": "query",
            "description": "Id of the activity.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Get detail of event's rsvp ",
            "schema": {
              "$ref": "#/definitions/EventPutRsvp"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get detail of event's rsvp ",
            "schema": {
              "$ref": "#/definitions/EventPutRsvp"
            }
          }
        }
      }
    },
    "/socialapi/events/delete/event": {
      "delete": {
        "summary": "deleteEvent",
        "description": "Create a request to remove event from server.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event id of the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Delete event from server.",
            "schema": {
              "$ref": "#/definitions/EventDeleteEvent"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete event from server.",
            "schema": {
              "$ref": "#/definitions/EventDeleteEvent"
            }
          }
        }
      }
    },
    "/socialapi/events/delete/topic": {
      "delete": {
        "summary": "deleteTopic",
        "description": "Create a request to remove event topic from server.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the event topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Delete event topic from server.",
            "schema": {
              "$ref": "#/definitions/EventDeleteTopic"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete event topic from server.",
            "schema": {
              "$ref": "#/definitions/EventDeleteTopic"
            }
          }
        }
      }
    },
    "/socialapi/events/delete/post": {
      "delete": {
        "summary": "deletePost",
        "description": "Create a request to remove event post from server.",
        "parameters": [
          {
            "name": "postId",
            "in": "formData",
            "description": "post Id of the event post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Delete event post from server.",
            "schema": {
              "$ref": "#/definitions/EventDeletePost"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete event post from server.",
            "schema": {
              "$ref": "#/definitions/EventDeletePost"
            }
          }
        }
      }
    },
    "/socialapi/events/delete/photo": {
      "delete": {
        "summary": "photoId",
        "description": "Create a request to remove event photo from server.",
        "parameters": [
          {
            "name": "photoId",
            "in": "formData",
            "description": "Photo Id of the event photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Event"
        ],
        "responses": {
          "200": {
            "description": "Delete event photo from server.",
            "schema": {
              "$ref": "#/definitions/EventDeletePhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete event photo from server.",
            "schema": {
              "$ref": "#/definitions/EventDeletePhoto"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/form": {
      "get": {
        "summary": "form",
        "description": "Request for group form parameters. Send post request and return form parameters available for groups.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show form parameters available for group.",
            "schema": {
              "$ref": "#/definitions/GroupGetForm"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show form parameters available for group.",
            "schema": {
              "$ref": "#/definitions/GroupGetForm"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/categories": {
      "get": {
        "summary": "categories",
        "description": "Request for all available groups categories list. Send post request and return categories available for groups.",
        "parameters": [
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show list of categories available for group.",
            "schema": {
              "$ref": "#/definitions/GroupGetCategory"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of categories available for group.",
            "schema": {
              "$ref": "#/definitions/GroupGetCategory"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/photos": {
      "get": {
        "summary": "photos",
        "description": "Request for all group's photos list. Send post request with group id and return photos specific to group id.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show list of photos specific to group.",
            "schema": {
              "$ref": "#/definitions/GroupGetPhotos"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of photos specific to group.",
            "schema": {
              "$ref": "#/definitions/GroupGetPhotos"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/members": {
      "get": {
        "summary": "attendies",
        "description": "Request for all members of the group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show list of group members",
            "schema": {
              "$ref": "#/definitions/GroupGetMembers"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of group members.",
            "schema": {
              "$ref": "#/definitions/GroupGetMembers"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/topics": {
      "get": {
        "summary": "topics",
        "description": "Request for all group's topics list. Send post request with group id and return topics specific to group id.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show list of topics specific to group.",
            "schema": {
              "$ref": "#/definitions/GroupGetTopics"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of topics specific to group.",
            "schema": {
              "$ref": "#/definitions/GroupGetTopics"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/posts": {
      "get": {
        "summary": "topicPosts",
        "description": "Request for group topic posts.Send post request with group id and topic id. Return posts specific to group's topic.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the vent topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show list of posts specific to group's topic.",
            "schema": {
              "$ref": "#/definitions/GroupGetPosts"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of posts specific to group's topic.",
            "schema": {
              "$ref": "#/definitions/GroupGetPosts"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/list": {
      "get": {
        "summary": "list",
        "description": "Request for all groups list. Send post request with user id and return groups list specific to user id.",
        "parameters": [
          {
            "name": "subjectType",
            "in": "query",
            "description": "To show the user group.",
            "required": false,
            "type": "string",
            "format": "text"
          },
          {
            "name": "subjectId",
            "in": "query",
            "description": "user id of the user which you want to show the group and also add subject parameter.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search_text",
            "in": "query",
            "description": "search the group name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show list of groups",
            "schema": {
              "$ref": "#/definitions/GroupGetList"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show list of groups",
            "schema": {
              "$ref": "#/definitions/GroupGetList"
            }
          }
        }
      }
    },
    "/socialapi/groups/get/detail": {
      "get": {
        "summary": "detail",
        "description": "Request for group's detail information. Send post request with group id and return group detailed information.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Show detail of requested group.",
            "schema": {
              "$ref": "#/definitions/GroupGetDetail"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Show detail of requested group.",
            "schema": {
              "$ref": "#/definitions/GroupGetDetail"
            }
          }
        }
      }
    },
    "/socialapi/groups/post/group": {
      "post": {
        "summary": "createGroup",
        "description": "Create a request to add new group to server. Send post request with group parameters. Add new group to server database.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "Title for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "description for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "data",
            "in": "formData",
            "description": "File data for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "category id for the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "formData",
            "description": "Search settings for group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "approval",
            "in": "formData",
            "description": "Approval status for the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_invite",
            "in": "formData",
            "description": "Invite settings for the group",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_view",
            "in": "formData",
            "description": "auth view settings for the group",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "formData",
            "description": "auth comment setting for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_photo",
            "in": "formData",
            "description": "auth photo setting for the group",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Create new group at server.",
            "schema": {
              "$ref": "#/definitions/GroupPostGroup"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Create new group at server.",
            "schema": {
              "$ref": "#/definitions/GroupPostGroup"
            }
          }
        }
      }
    },
    "/socialapi/groups/post/invite": {
      "post": {
        "summary": "invite",
        "description": "Create a request to invite friends to join an group. Send post request with event and user lists. Invite sent to selected users list.",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "event dd of event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "friends",
            "in": "query",
            "description": "user id of friends.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Invite sent to users for group.",
            "schema": {
              "$ref": "#/definitions/GroupPostInvite"
            }
          },
          "default": {
            "description": "Invite sent to users for group.",
            "schema": {
              "$ref": "#/definitions/GroupPostInvite"
            }
          }
        }
      }
    },
    "/socialapi/groups/post/photo": {
      "post": {
        "summary": "photo",
        "description": "Create a request to add new photo.",
        "parameters": [
          {
            "name": "groupId",
            "in": "formData",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "data",
            "in": "formData",
            "description": "file data for the group photo.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Request for group photo details.",
            "schema": {
              "$ref": "#/definitions/GroupPostPhoto"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request for group photo details.",
            "schema": {
              "$ref": "#/definitions/GroupPostPhoto"
            }
          }
        }
      }
    },
    "/socialapi/groups/post/membership": {
      "post": {
        "summary": "membership",
        "description": "Create a request for group membership.",
        "parameters": [
          {
            "name": "groupId",
            "in": "formData",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Request to become member of group.",
            "schema": {
              "$ref": "#/definitions/GroupPostMembership"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Request to become member of group.",
            "schema": {
              "$ref": "#/definitions/GroupPostMembership"
            }
          }
        }
      }
    },
    "/socialapi/groups/post/groupmessage": {
      "post": {
        "summary": "Group Message",
        "description": "Create a request to send message to all group members. Submit the message to server.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of the message",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "query",
            "description": "body of the message.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Add new message to server.",
            "schema": {
              "$ref": "#/definitions/MessagePostCompose"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Add new message to server.",
            "schema": {
              "$ref": "#/definitions/MessagePostCompose"
            }
          }
        }
      }
    },
    "/socialapi/groups/post/event": {
      "post": {
        "summary": "createEvent",
        "description": "Create a request to add new event to server. Send post request with event parameters. Add new event to server database.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "Title for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "description for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "data",
            "in": "formData",
            "description": "File data for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "starttime",
            "in": "formData",
            "description": "start time for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "endtime",
            "in": "formData",
            "description": "end time for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "host",
            "in": "formData",
            "description": "Host detail for event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "location",
            "in": "formData",
            "description": "Location or address detail for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "category id for the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "parent_id",
            "in": "formData",
            "description": "group id for the parent group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "formData",
            "description": "Search settings for event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "approval",
            "in": "formData",
            "description": "Approval status for the event.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_invite",
            "in": "formData",
            "description": "Invite settings for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_view",
            "in": "formData",
            "description": "auth view settings for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "formData",
            "description": "auth comment setting for the event.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_photo",
            "in": "formData",
            "description": "auth photo setting for the event",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Create new event for group."
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/socialapi/groups/post/topic": {
      "post": {
        "summary": "topic",
        "description": "Create a request to post new group topics.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "description": "title for the topic.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "body of the topic.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "formData",
            "description": "watch property of the topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "groupId",
            "in": "formData",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Fetch list of topics specific to group profile.",
            "schema": {
              "$ref": "#/definitions/GroupPostTopic"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Fetch list of topics specific to group profile.",
            "schema": {
              "$ref": "#/definitions/GroupPostTopic"
            }
          }
        }
      }
    },
    "/socialapi/groups/post/post": {
      "post": {
        "summary": "post",
        "description": "Create a request to post group post.",
        "parameters": [
          {
            "name": "body",
            "in": "formData",
            "description": "body for the post of the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "watch",
            "in": "formData",
            "description": "watch property of the post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "topicId",
            "in": "formData",
            "description": "topic id of the  topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "ref",
            "in": "formData",
            "description": "reference url of the topic.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Fetch list of post specific to group profile.",
            "schema": {
              "$ref": "#/definitions/GroupPostPost"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Fetch list of post specific to group profile.",
            "schema": {
              "$ref": "#/definitions/GroupPostPost"
            }
          }
        }
      }
    },
    "/socialapi/groups/put/group": {
      "put": {
        "summary": "editGroup",
        "description": "Create a request to edit group details.",
        "parameters": [
          {
            "name": "groupId",
            "in": "formData",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "title",
            "in": "formData",
            "description": "Title for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "description for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "data",
            "in": "formData",
            "description": "File data for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "category id for the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "search",
            "in": "formData",
            "description": "Search settings for group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "approval",
            "in": "formData",
            "description": "Approval status for the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "auth_invite",
            "in": "formData",
            "description": "Invite settings for the group",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_view",
            "in": "formData",
            "description": "auth view settings for the group",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_comment",
            "in": "formData",
            "description": "auth comment setting for the group.",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "auth_photo",
            "in": "formData",
            "description": "auth photo setting for the group",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Edit group details at server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Edit group details at server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/put/post": {
      "put": {
        "summary": "post",
        "description": "Edit a topic post for a group.",
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "description": "post id of the group post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "body",
            "in": "formData",
            "description": "text for event post.",
            "required": true,
            "type": "string",
            "format": "string"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Edit post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Edit post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/put/promote": {
      "put": {
        "summary": "promoteMember",
        "description": "Create a request to promote a group member as group office",
        "parameters": [
          {
            "name": "groupId",
            "in": "formData",
            "description": "group id of group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "memberId",
            "in": "formData",
            "description": "User id of member who you ant to promote as group office.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Edit group details at server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Edit group details at server.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/delete/group": {
      "delete": {
        "summary": "deleteEvent",
        "description": "Create a request to remove group from server.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Delete group.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete group.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/delete/topic": {
      "delete": {
        "summary": "deleteTopic",
        "description": "Create a request to remove group topic from server.",
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "description": "topic id of the topic.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Delete group topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete group topic.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/delete/post": {
      "delete": {
        "summary": "deletePost",
        "description": "Create a request to remove group post from server.",
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "description": "post Id of the post.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Delete group post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete group post.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/delete/member": {
      "delete": {
        "summary": "deleteEvent",
        "description": "Create a request to remove member from the group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "memberId",
            "in": "query",
            "description": "user id of member whom you want to remove from the group..",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Removed the group member.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Removed the group member.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/delete/demote": {
      "delete": {
        "summary": "demote",
        "description": "Create a request to demote group office to normal member.",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group id of the group.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "memberId",
            "in": "query",
            "description": "user id of group office whom you want to remove from ogroup officer list..",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Demote group member.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Demote group member.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/groups/delete/photo": {
      "delete": {
        "summary": "photoId",
        "description": "Create a request to remove group photo from server.",
        "parameters": [
          {
            "name": "photoId",
            "in": "query",
            "description": "Photo Id of the photo.",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Group"
        ],
        "responses": {
          "200": {
            "description": "Delete group photo",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Delete group photo.",
            "schema": {
              "$ref": "#/definitions/PutDefination"
            }
          }
        }
      }
    },
    "/socialapi/viewed/get/viewers": {
      "get": {
        "summary": "get viewed",
        "description": "Get viewer list who viewed profile.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user id of the user.",
            "required": false,
            "type": "number",
            "format": "int"
          },
          {
            "name": "PHPSESSID",
            "in": "query",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Viewed"
        ],
        "responses": {
          "200": {
            "description": "Get list of recently viewed users list.",
            "schema": {
              "$ref": "#/definitions/ViewedGetList"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Get list of recently viewed users list.",
            "schema": {
              "$ref": "#/definitions/ViewedGetList"
            }
          }
        }
      }
    },
    "/socialapi/viewed/post/viewed": {
      "post": {
        "summary": "Viewed",
        "description": "Post a view entry by viewer to user profile.",
        "parameters": [
          {
            "name": "subjectId",
            "in": "formData",
            "description": "subject id of the user subject",
            "required": true,
            "type": "string",
            "format": "text"
          },
          {
            "name": "PHPSESSID",
            "in": "header",
            "description": "session id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "apiKey",
            "in": "query",
            "description": "api key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "query",
            "description": "secret key of the Api.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "version key of the Api.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Viewed"
        ],
        "responses": {
          "200": {
            "description": "Post a view entry by viewer to user profile.",
            "schema": {
              "$ref": "#/definitions/ViewedPostView"
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "405": {
            "description": "Method not supported"
          },
          "500": {
            "description": "Server error"
          },
          "default": {
            "description": "Post a view entry by viewer to user profile.",
            "schema": {
              "$ref": "#/definitions/ViewedPostView"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuthLogin": {
      "type": "object",
      "required": [
        "status",
        "user",
        "count",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "message": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "User": {
      "required": [
        "userId",
        "email",
        "username"
      ],
      "properties": {
        "userId": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "AuthFacebook": {
      "type": "object",
      "required": [
        "status",
        "user",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AuthFacebookSync": {
      "type": "object",
      "required": [
        "status",
        "user",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AuthFacebookSignup": {
      "type": "object",
      "required": [
        "status",
        "user",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AuthTwitter": {
      "type": "object",
      "required": [
        "status",
        "user",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AuthTwitterSync": {
      "type": "object",
      "required": [
        "status",
        "user",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AuthTwitterSignup": {
      "type": "object",
      "required": [
        "status",
        "user",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AuthSignup": {
      "type": "object",
      "required": [
        "status",
        "user",
        "userId",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "userId": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "UserProfileGetImageLikes": {
      "type": "object",
      "required": [
        "status",
        "message",
        "totalLikeCount",
        "likes"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "totalLikeCount": {
          "type": "integer"
        },
        "likes": {
          "type": "array",
          "$ref": "#/definitions/profileImageLikes"
        }
      }
    },
    "profileImageLikes": {
      "type": "object",
      "required": [
        "like_id",
        "user_id"
      ],
      "properties": {
        "like_id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        }
      }
    },
    "UserProfileGetProfile": {
      "type": "object",
      "required": [
        "status",
        "usermeta",
        "userdata"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "usermeta": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userProfileMeta"
          }
        },
        "userdata": {
          "type": "array",
          "$ref": "#/definitions/userProfileData"
        }
      }
    },
    "UserProfileGetMobile": {
      "type": "object",
      "required": [
        "status",
        "mobile",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        }
      }
    },
    "userProfileData": {
      "type": "object",
      "required": [
        "photoUrl",
        "userId",
        "email",
        "username"
      ],
      "properties": {
        "photoUrl": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "userProfileMeta": {
      "type": "object",
      "required": [
        "label",
        "value",
        "fieldId",
        "fieldType"
      ],
      "properties": {
        "label": {
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "fieldId": {
          "type": "string"
        },
        "fieldType": {
          "type": "string"
        }
      }
    },
    "UserProfilePostProfile": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "UserProfileRemovePhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedGetList": {
      "type": "object",
      "required": [
        "status",
        "totalPageCount",
        "itemPerPage",
        "offset",
        "activities"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "totalPageCount": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "activities": {
          "type": "array",
          "$ref": "#/definitions/Activities"
        }
      }
    },
    "Activities": {
      "type": "object",
      "required": [
        "activityId",
        "title",
        "activityType",
        "activityBody",
        "params",
        "objectId",
        "objectType",
        "objectName",
        "subjectId",
        "subjectType",
        "subjectName",
        "subjectImage",
        "commentcount",
        "likecount",
        "like",
        "attachmentcount",
        "attachment",
        "activityDate"
      ],
      "properties": {
        "activityId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "activityType": {
          "type": "integer"
        },
        "activityBody": {
          "type": "string"
        },
        "params": {
          "type": "string"
        },
        "objectId": {
          "type": "integer"
        },
        "objectType": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        },
        "subjectId": {
          "type": "integer"
        },
        "subjectType": {
          "type": "string"
        },
        "subjectName": {
          "type": "string"
        },
        "subjectImage": {
          "type": "string"
        },
        "commentcount": {
          "type": "integer"
        },
        "likecount": {
          "type": "integer"
        },
        "like": {
          "type": "string"
        },
        "attachmentcount": {
          "type": "integer"
        },
        "attachment": {
          "type": "array",
          "$ref": "#/definitions/Attachments"
        },
        "activityDate": {
          "type": "string"
        }
      }
    },
    "Attachments": {
      "type": "object",
      "required": [
        "linkId",
        "url",
        "title",
        "description",
        "parentId",
        "parentType",
        "ownerId",
        "ownerType",
        "photoId",
        "photoUrl",
        "size"
      ],
      "properties": {
        "linkId": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parentId": {
          "type": "integer"
        },
        "parentType": {
          "type": "string"
        },
        "ownerId": {
          "type": "integer"
        },
        "ownerType": {
          "type": "string"
        },
        "photoId": {
          "type": "integer"
        },
        "photoUrl": {
          "type": "string"
        },
        "size": {
          "type": "string"
        }
      }
    },
    "ActivityComments": {
      "type": "object",
      "required": [
        "status",
        "totalPageCount",
        "itemPerPage",
        "offset",
        "comments"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "totalPageCount": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "comments": {
          "type": "array",
          "$ref": "#/definitions/Comments"
        }
      }
    },
    "Comments": {
      "type": "object",
      "required": [
        "commentId",
        "bodyText",
        "userId",
        "username",
        "likeCount",
        "like",
        "commentDate"
      ],
      "properties": {
        "commentId": {
          "type": "integer"
        },
        "bodyText": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "likeCount": {
          "type": "integer"
        },
        "like": {
          "type": "object"
        },
        "commentDate": {
          "type": "string"
        }
      }
    },
    "ActivityFeedGetLikes": {
      "type": "object",
      "required": [
        "status",
        "totalPageCount",
        "itemPerPage",
        "offset",
        "likes"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "totalPageCount": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "likes": {
          "type": "array",
          "$ref": "#/definitions/Likes"
        }
      }
    },
    "Likes": {
      "type": "object",
      "required": [
        "userId",
        "username",
        "likeId",
        "block",
        "view",
        "status",
        "friend",
        "friendShip"
      ],
      "properties": {
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "likeId": {
          "type": "integer"
        },
        "likeId": {
          "type": "integer"
        },
        "block": {
          "type": "boolean"
        },
        "view": {
          "type": "integer"
        },
        "status": {
          "type": "integer"
        },
        "friend": {
          "type": "integer"
        },
        "friendShip": {
          "type": "string"
        }
      }
    },
    "ActivityFeedGetEnableModules": {
      "type": "object",
      "required": [
        "status",
        "modules"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "modules": {
          "type": "array",
          "$ref": "#/definitions/Modules"
        }
      }
    },
    "Modules": {
      "type": "object",
      "required": [
        "name",
        "enable"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "ActivityFeedPostActivity": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedPostShare": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedPostComment": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedPostLikeComment": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedPostLike": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedDeleteActivity": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedDeleteComment": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedBlock": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivityFeedSpam": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MessagePostCompose": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MessagePostReply": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MessageGetInbox": {
      "type": "object",
      "required": [
        "status",
        "message",
        "messagesMetadata"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "array",
          "$ref": "#/definitions/Messages"
        },
        "messagesMetadata": {
          "type": "array",
          "$ref": "#/definitions/MessageMetadata"
        }
      }
    },
    "Messages": {
      "type": "object",
      "required": [
        "conversationId",
        "messageTitle",
        "body",
        "date",
        "photoId",
        "thumbnail",
        "senderId",
        "senderName",
        "read"
      ],
      "properties": {
        "conversationId": {
          "type": "integer"
        },
        "messageTitle": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "senderId": {
          "type": "integer"
        },
        "senderName": {
          "type": "string"
        },
        "read": {
          "type": "boolean"
        },
        "photoId": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "MessagesOutbox": {
      "type": "object",
      "required": [
        "conversationId",
        "messageTitle",
        "body",
        "date",
        "thumbnail",
        "photoId"
      ],
      "properties": {
        "conversationId": {
          "type": "integer"
        },
        "messageTitle": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "photoId": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "MessagesConversation": {
      "type": "object",
      "required": [
        "conversationId",
        "messageTitle",
        "body",
        "senderId",
        "senderName",
        "date",
        "thumbnail",
        "age",
        "photoId"
      ],
      "properties": {
        "conversationId": {
          "type": "integer"
        },
        "messageTitle": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "senderId": {
          "type": "integer"
        },
        "senderName": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "photoId": {
          "type": "integer"
        },
        "age": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "MessageMetadata": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "totalUnread"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "totalUnread": {
          "type": "integer"
        }
      }
    },
    "MessageOutboxMetadata": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "user_id"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        }
      }
    },
    "MessageGetOutbox": {
      "type": "object",
      "required": [
        "status",
        "message",
        "messagesMetadata"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "array",
          "$ref": "#/definitions/MessagesOutbox"
        },
        "messagesMetadata": {
          "type": "array",
          "$ref": "#/definitions/MessageOutboxMetadata"
        }
      }
    },
    "MessageGetConversation": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "array",
          "$ref": "#/definitions/MessagesConversation"
        }
      }
    },
    "MessageDeleteMessage": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MemberGetList": {
      "type": "object",
      "required": [
        "status",
        "user",
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "array",
          "$ref": "#/definitions/Users"
        },
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "object",
      "required": [
        "photoUrl",
        "userId",
        "email",
        "username"
      ],
      "properties": {
        "photoUrl": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Notifications": {
      "type": "object",
      "required": [
        "notificationId",
        "html",
        "body",
        "objectType",
        "objectId",
        "module",
        "subjectId",
        "subjectType",
        "read",
        "date"
      ],
      "properties": {
        "notificationId": {
          "type": "integer"
        },
        "html": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "objectType": {
          "type": "string"
        },
        "objectId": {
          "type": "integer"
        },
        "module": {
          "type": "string"
        },
        "subjectType": {
          "type": "string"
        },
        "subjectId": {
          "type": "integer"
        },
        "read": {
          "type": "integer"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "Blockmembers": {
      "type": "object",
      "required": [
        "thumbnail",
        "userId",
        "email",
        "username"
      ],
      "properties": {
        "thumbnail": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Friends": {
      "type": "object",
      "required": [
        "thumbnail",
        "userId",
        "email",
        "username"
      ],
      "properties": {
        "thumbnail": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "email": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "MemberGetNotifications": {
      "type": "object",
      "required": [
        "status",
        "notifications",
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "notifications": {
          "type": "array",
          "$ref": "#/definitions/Notifications"
        },
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ProfileFields": {
      "type": "object",
      "required": [
        "fieldId",
        "type",
        "value",
        "label",
        "required",
        "options"
      ],
      "properties": {
        "fieldId": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "required": {
          "type": "integer"
        },
        "options": {
          "type": "array",
          "$ref": "#/definitions/ProfileTypes"
        }
      }
    },
    "MemberGetBlockMembers": {
      "type": "object",
      "required": [
        "status",
        "blockmembers",
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "blockmembers": {
          "type": "array",
          "$ref": "#/definitions/Blockmembers"
        },
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MemberGetFriends": {
      "type": "object",
      "required": [
        "status",
        "friends",
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "friends": {
          "type": "array",
          "$ref": "#/definitions/Friends"
        },
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MemberGetFields": {
      "type": "object",
      "required": [
        "status",
        "profileFields"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "profileFields": {
          "type": "object",
          "$ref": "#/definitions/ProfileFields"
        }
      }
    },
    "MemberGetNetworkStats": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MemberGetFriendship": {
      "type": "object",
      "required": [
        "status",
        "message",
        "friend"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "friend": {
          "type": "integer"
        }
      }
    },
    "MemberPostAddFriend": {
      "type": "object",
      "required": [
        "status",
        "message",
        "friend",
        "friendShip"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "friend": {
          "type": "string"
        },
        "friendShip": {
          "type": "string"
        }
      }
    },
    "MemberPostRemoveFriend": {
      "type": "object",
      "required": [
        "status",
        "message",
        "friend",
        "friendShip"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "friend": {
          "type": "string"
        },
        "friendShip": {
          "type": "string"
        }
      }
    },
    "MemberPostProfileLike": {
      "type": "object",
      "required": [
        "fileId",
        "userId"
      ],
      "properties": {
        "fileId": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        }
      }
    },
    "MemberPostProfileComment": {
      "type": "object",
      "required": [
        "fileId",
        "text",
        "userId"
      ],
      "properties": {
        "fileId": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "MemberGetProfileComments": {
      "type": "object",
      "required": [
        "status",
        "message",
        "totalCommentCount",
        "comment"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "totalCommentCount": {
          "type": "integer"
        },
        "comment": {
          "type": "array",
          "$ref": "#/definitions/profileImageComment"
        }
      }
    },
    "profileImageComment": {
      "type": "object",
      "required": [
        "commentId",
        "userId",
        "comment"
      ],
      "properties": {
        "commentId": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "MemberPostConfirmFriend": {
      "type": "object",
      "required": [
        "status",
        "message",
        "friend",
        "friendShip"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "friend": {
          "type": "string"
        },
        "friendShip": {
          "type": "string"
        }
      }
    },
    "MemberPostCancelFriend": {
      "type": "object",
      "required": [
        "status",
        "message",
        "friend",
        "friendShip"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "friend": {
          "type": "string"
        },
        "friendShip": {
          "type": "string"
        }
      }
    },
    "MemberPostNotification": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlbumGetPhotos": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "totalPhotos",
        "photos",
        "commentCount",
        "likeCount",
        "like",
        "auth_view",
        "auth_comment",
        "auth_tag",
        "search",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "totalPhotos": {
          "type": "integer"
        },
        "photos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Photos"
          }
        },
        "auth_view": {
          "type": "string"
        },
        "commentCount": {
          "type": "integer"
        },
        "likeCount": {
          "type": "integer"
        },
        "like": {
          "type": "boolean"
        },
        "auth_comment": {
          "type": "string"
        },
        "auth_tag": {
          "type": "string"
        },
        "search": {
          "type": "integer"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "AlbumGetAlbums": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "albums",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "albums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Albums"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "AlbumGetAlbumDetails": {
      "type": "object",
      "required": [
        "albums",
        "status"
      ],
      "properties": {
        "albums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Albums"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "AlbumGetComments": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "comments",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comments"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "AlbumGetPhotoComments": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "comments",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comments"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "Comments": {
      "type": "object",
      "required": [
        "commentId",
        "bodyText",
        "username",
        "likeCount",
        "userLike",
        "commentDate",
        "commentImage"
      ],
      "properties": {
        "commentId": {
          "type": "integer"
        },
        "bodyText": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "likeCount": {
          "type": "integer"
        },
        "userLike": {
          "type": "integer"
        },
        "commentDate": {
          "type": "string"
        },
        "commentImage": {
          "type": "string"
        }
      }
    },
    "Albums": {
      "type": "object",
      "required": [
        "albumId",
        "count",
        "title",
        "description",
        "category",
        "categoryId",
        "viewCount",
        "date",
        "subjectId",
        "ownerType",
        "username",
        "url"
      ],
      "properties": {
        "albumId": {
          "type": "integer"
        },
        "count": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "categoryId": {
          "type": "integer"
        },
        "viewCount": {
          "type": "integer"
        },
        "date": {
          "type": "string"
        },
        "subjectId": {
          "type": "integer"
        },
        "ownerType": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "Photos": {
      "type": "object",
      "required": [
        "albumId",
        "photoId",
        "title",
        "description",
        "category",
        "categoryId",
        "commentCount",
        "viewCount",
        "like",
        "thumbPhoto",
        "fullPhoto"
      ],
      "properties": {
        "albumId": {
          "type": "integer"
        },
        "photoId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "categoryId": {
          "type": "integer"
        },
        "viewCount": {
          "type": "integer"
        },
        "commentCount": {
          "type": "integer"
        },
        "likeCount": {
          "type": "integer"
        },
        "like": {
          "type": "boolean"
        },
        "thumbPhoto": {
          "type": "string"
        },
        "fullPhoto": {
          "type": "string"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "PhotoArray": {
      "type": "object",
      "required": [
        "albumId",
        "photoId",
        "title",
        "description",
        "fullPhoto"
      ],
      "properties": {
        "albumId": {
          "type": "integer"
        },
        "photoId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fullPhoto": {
          "type": "string"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "AlbumGetForm": {
      "type": "object",
      "required": [
        "categories",
        "auth_view",
        "auth_comment",
        "auth_tag"
      ],
      "properties": {
        "categories": {
          "type": "integer"
        },
        "auth_view": {
          "type": "integer"
        },
        "auth_comment": {
          "type": "integer"
        },
        "auth_tag": {
          "type": "integer"
        }
      }
    },
    "AlbumGetCategory": {
      "type": "object",
      "required": [
        "categories",
        "status"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlbumCategories"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "AlbumCategories": {
      "type": "object",
      "required": [
        "category_id",
        "category_name"
      ],
      "properties": {
        "category_id": {
          "type": "integer"
        },
        "category_name": {
          "type": "string"
        }
      }
    },
    "Categories": {
      "type": "object",
      "required": [
        "category_id",
        "category_name"
      ],
      "properties": {
        "category_id": {
          "type": "integer"
        },
        "category_name": {
          "type": "string"
        }
      }
    },
    "ProfileTypes": {
      "type": "object",
      "required": [
        "optionId",
        "label"
      ],
      "properties": {
        "optionId": {
          "type": "integer"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "UserProfileFields": {
      "type": "object",
      "required": [
        "fieldId",
        "type",
        "label",
        "required",
        "options"
      ],
      "properties": {
        "fieldId": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileOptions"
          }
        }
      }
    },
    "ProfileOptions": {
      "type": "object",
      "required": [
        "optionId",
        "optionLable"
      ],
      "properties": {
        "optionId": {
          "type": "integer"
        },
        "optionLable": {
          "type": "string"
        }
      }
    },
    "AlbumGetPhoto": {
      "type": "object",
      "required": [
        "userId",
        "photoArray",
        "nextPhotoId",
        "prevPhotoId",
        "status"
      ],
      "properties": {
        "userId": {
          "type": "integer"
        },
        "photoArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhotoArray"
          }
        },
        "nextPhotoId": {
          "type": "integer"
        },
        "prevPhotoId": {
          "type": "integer"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "AlbumPostAlbum": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlbumPostPhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlbumPutAlbum": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlbumPutProfilePhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlbumPutMovePhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlbumDeletePhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlbumDeleteAlbum": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventGetDetail": {
      "type": "object",
      "required": [
        "status",
        "title",
        "description",
        "host",
        "location",
        "starttime",
        "endtime",
        "category",
        "categoryId",
        "thumbnail",
        "memberCount",
        "topicCount",
        "photoCount",
        "userAttended",
        "edit",
        "membership",
        "delete",
        "invite",
        "search",
        "approval",
        "auth_view",
        "auth_comment",
        "auth_photo",
        "canInvite",
        "canView",
        "canComment",
        "canPhoto"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "starttime": {
          "type": "string"
        },
        "endtime": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "categoryId": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        },
        "memberCount": {
          "type": "string"
        },
        "topicCount": {
          "type": "integer"
        },
        "photoCount": {
          "type": "integer"
        },
        "userAttended": {
          "type": "integer"
        },
        "edit": {
          "type": "integer"
        },
        "membership": {
          "type": "integer"
        },
        "delete": {
          "type": "integer"
        },
        "invite": {
          "type": "integer"
        },
        "search": {
          "type": "integer"
        },
        "approval": {
          "type": "integer"
        },
        "auth_view": {
          "type": "string"
        },
        "auth_comment": {
          "type": "string"
        },
        "auth_photo": {
          "type": "string"
        },
        "canInvite": {
          "type": "integer"
        },
        "canView": {
          "type": "boolean"
        },
        "canPhoto": {
          "type": "integer"
        },
        "canComment": {
          "type": "integer"
        }
      }
    },
    "GroupGetDetail": {
      "type": "object",
      "required": [
        "status",
        "title",
        "description",
        "category",
        "categoryId",
        "thumbnail",
        "memberCount",
        "topicCount",
        "photoCount",
        "edit",
        "membership",
        "delete",
        "invite",
        "search",
        "approval",
        "auth_invite",
        "auth_view",
        "auth_comment",
        "auth_photo",
        "auth_event",
        "canInvite",
        "canView",
        "canComment",
        "canPhoto",
        "canEvent"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "categoryId": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        },
        "memberCount": {
          "type": "string"
        },
        "topicCount": {
          "type": "integer"
        },
        "photoCount": {
          "type": "integer"
        },
        "edit": {
          "type": "integer"
        },
        "membership": {
          "type": "integer"
        },
        "delete": {
          "type": "integer"
        },
        "invite": {
          "type": "integer"
        },
        "search": {
          "type": "integer"
        },
        "approval": {
          "type": "integer"
        },
        "auth_invite": {
          "type": "string"
        },
        "auth_view": {
          "type": "string"
        },
        "auth_comment": {
          "type": "string"
        },
        "auth_photo": {
          "type": "string"
        },
        "auth_event": {
          "type": "string"
        },
        "canInvite": {
          "type": "integer"
        },
        "canView": {
          "type": "boolean"
        },
        "canPhoto": {
          "type": "integer"
        },
        "canComment": {
          "type": "integer"
        },
        "canEvent": {
          "type": "integer"
        }
      }
    },
    "BlogGetDetail": {
      "type": "object",
      "required": [
        "status",
        "title",
        "body",
        "category",
        "categoryId",
        "thumbnail",
        "commentCount",
        "likeCount",
        "like",
        "search",
        "auth_view",
        "auth_comment",
        "canView",
        "canComment"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "categoryId": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        },
        "commentCount": {
          "type": "integer"
        },
        "likeCount": {
          "type": "integer"
        },
        "like": {
          "type": "boolean"
        },
        "search": {
          "type": "integer"
        },
        "auth_view": {
          "type": "string"
        },
        "auth_comment": {
          "type": "string"
        },
        "canView": {
          "type": "boolean"
        },
        "canComment": {
          "type": "integer"
        }
      }
    },
    "EventGetPhotos": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "totalPhotos",
        "photos",
        "auth_view",
        "auth_comment",
        "auth_tag",
        "search",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "search": {
          "type": "integer"
        },
        "totalPhotos": {
          "type": "integer"
        },
        "auth_view": {
          "type": "integer"
        },
        "auth_comment": {
          "type": "integer"
        },
        "auth_tag": {
          "type": "integer"
        },
        "photos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventPhotos"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "GroupGetPhotos": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "totalPhotos",
        "photos",
        "auth_view",
        "auth_comment",
        "auth_tag",
        "search",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "search": {
          "type": "integer"
        },
        "totalPhotos": {
          "type": "integer"
        },
        "auth_view": {
          "type": "integer"
        },
        "auth_comment": {
          "type": "integer"
        },
        "auth_tag": {
          "type": "integer"
        },
        "photos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupPhotos"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "EventGetList": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "events",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "Event": {
      "required": [
        "eventId",
        "title",
        "location",
        "starttime",
        "endtime",
        "host",
        "rsvp",
        "memberCount",
        "thumbnail"
      ],
      "properties": {
        "eventId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "starttime": {
          "type": "string"
        },
        "endtime": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "rsvp": {
          "type": "integer"
        },
        "memberCount": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "GroupGetList": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "groups",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "Group": {
      "required": [
        "groupId",
        "title",
        "description",
        "ownerName",
        "ownerId",
        "memberCount",
        "thumbnail"
      ],
      "properties": {
        "groupId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerId": {
          "type": "integer"
        },
        "memberCount": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "BlogGetList": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "blogs",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "blogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Blog"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "Blog": {
      "required": [
        "blogId",
        "title",
        "body",
        "ownerName",
        "ownerId",
        "thumbnail"
      ],
      "properties": {
        "blogId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerId": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "ForumGetList": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "forums",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "forums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Forum"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "Forum": {
      "required": [
        "forumId",
        "title",
        "description",
        "categoryId",
        "category",
        "modifiedDate",
        "order",
        "viewCount",
        "topicCount",
        "postCount",
        "lastpostId",
        "lastpostbody",
        "lastpostUserid",
        "lastpostname"
      ],
      "properties": {
        "forumId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "categoryId": {
          "type": "integer"
        },
        "category": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "viewCount": {
          "type": "integer"
        },
        "topicCount": {
          "type": "integer"
        },
        "postCount": {
          "type": "integer"
        },
        "lastpostId": {
          "type": "integer"
        },
        "lastpostbody": {
          "type": "string"
        },
        "lastpostUserid": {
          "type": "integer"
        },
        "lastpostname": {
          "type": "string"
        }
      }
    },
    "ForumGetTopics": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "topics",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ForumTopics"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "ForumTopics": {
      "required": [
        "topicId",
        "forumId",
        "title",
        "description",
        "modifiedDate",
        "order",
        "viewCount",
        "postCount",
        "lastpostId",
        "lastpostbody",
        "lastpostUserid",
        "lastpostname"
      ],
      "properties": {
        "topicId": {
          "type": "integer"
        },
        "forumId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "viewCount": {
          "type": "integer"
        },
        "postCount": {
          "type": "integer"
        },
        "lastpostId": {
          "type": "integer"
        },
        "lastpostbody": {
          "type": "string"
        },
        "lastpostUserid": {
          "type": "integer"
        },
        "lastpostname": {
          "type": "string"
        }
      }
    },
    "ForumPosts": {
      "required": [
        "postId",
        "forumId",
        "body",
        "modifiedDate",
        "poster",
        "posterId"
      ],
      "properties": {
        "postId": {
          "type": "integer"
        },
        "forumId": {
          "type": "integer"
        },
        "body": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "string"
        },
        "poster": {
          "type": "string"
        },
        "posterId": {
          "type": "integer"
        }
      }
    },
    "EventPhotos": {
      "required": [
        "photoId",
        "fileId",
        "url",
        "date",
        "username",
        "userId"
      ],
      "properties": {
        "photoId": {
          "type": "integer"
        },
        "fileId": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        }
      }
    },
    "GroupPhotos": {
      "required": [
        "photoId",
        "fileId",
        "url",
        "date",
        "username",
        "userId"
      ],
      "properties": {
        "photoId": {
          "type": "integer"
        },
        "fileId": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        }
      }
    },
    "EventGetAttendies": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "members",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventMembers"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "EventMembers": {
      "required": [
        "username",
        "userId",
        "rsvp",
        "membership",
        "thumbnail"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "rsvp": {
          "type": "integer"
        },
        "membership": {
          "type": "integer"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "GroupGetMembers": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "members",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupMembers"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "GroupMembers": {
      "required": [
        "username",
        "userId",
        "officer",
        "membership",
        "thumbnail"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "officer": {
          "type": "boolean"
        },
        "membership": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "EventGetTopics": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "topics",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventTopics"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "EventTopics": {
      "required": [
        "topicId",
        "title",
        "body",
        "userId",
        "username",
        "viewCount",
        "postCount",
        "date"
      ],
      "properties": {
        "topicId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "viewCount": {
          "type": "integer"
        },
        "postCount": {
          "type": "integer"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "GroupGetTopics": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "topics",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupTopics"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "GroupTopics": {
      "required": [
        "topicId",
        "title",
        "body",
        "userId",
        "username",
        "viewCount",
        "postCount",
        "date"
      ],
      "properties": {
        "topicId": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "viewCount": {
          "type": "integer"
        },
        "postCount": {
          "type": "integer"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "EventPosts": {
      "required": [
        "postId",
        "body",
        "userId",
        "username",
        "thumbnail",
        "date"
      ],
      "properties": {
        "postId": {
          "type": "integer"
        },
        "body": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "EventGetPosts": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "posts",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventPosts"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "GroupPosts": {
      "required": [
        "postId",
        "body",
        "userId",
        "username",
        "thumbnail",
        "date"
      ],
      "properties": {
        "postId": {
          "type": "integer"
        },
        "body": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "GroupGetPosts": {
      "type": "object",
      "required": [
        "totalPageCount",
        "pageId",
        "itemPerPage",
        "offset",
        "posts",
        "status"
      ],
      "properties": {
        "totalPageCount": {
          "type": "integer"
        },
        "pageId": {
          "type": "integer"
        },
        "itemPerPage": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupPosts"
          }
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "EventGetForm": {
      "type": "object",
      "required": [
        "categories",
        "auth_view",
        "auth_comment",
        "auth_tag"
      ],
      "properties": {
        "categories": {
          "type": "integer"
        },
        "auth_view": {
          "type": "integer"
        },
        "auth_comment": {
          "type": "integer"
        },
        "auth_tag": {
          "type": "integer"
        }
      }
    },
    "GroupGetForm": {
      "type": "object",
      "required": [
        "categories",
        "auth_view",
        "auth_event",
        "auth_comment"
      ],
      "properties": {
        "categories": {
          "type": "integer"
        },
        "auth_view": {
          "type": "integer"
        },
        "auth_comment": {
          "type": "integer"
        },
        "auth_event": {
          "type": "integer"
        }
      }
    },
    "BlogGetForm": {
      "type": "object",
      "required": [
        "categories",
        "auth_view",
        "auth_comment"
      ],
      "properties": {
        "categories": {
          "type": "string"
        },
        "auth_view": {
          "type": "integer"
        },
        "auth_comment": {
          "type": "integer"
        }
      }
    },
    "EventGetCategory": {
      "type": "object",
      "required": [
        "categories",
        "status"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "$ref": "#/definitions/Categories"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "GroupGetCategory": {
      "type": "object",
      "required": [
        "categories",
        "status"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "$ref": "#/definitions/Categories"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "EventPostEvent": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GroupPostGroup": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPostPhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GroupPostPhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPostMembership": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GroupPostMembership": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPostApprove": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPostInvite": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPostShare": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GroupPostInvite": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPostTopic": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GroupPostTopic": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPostPost": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GroupPostPost": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPutEvent": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PutDefination": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ForgotPassword": {
      "type": "object",
      "required": [
        "status",
        "user",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "user": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AuthProfileTypes": {
      "type": "object",
      "required": [
        "status",
        "profileTypes"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "profileTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserProfileTypes"
          }
        }
      }
    },
    "UserProfileTypes": {
      "type": "object",
      "required": [
        "optionId",
        "label"
      ],
      "properties": {
        "optionId": {
          "type": "integer"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "AuthProfileFields": {
      "type": "object",
      "required": [
        "status",
        "profileFields"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "profileFields": {
          "type": "array",
          "$ref": "#/definitions/UserProfileFields"
        }
      }
    },
    "DefaultPhoto": {
      "type": "object",
      "required": [
        "status",
        "photoUrl"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "photoUrl": {
          "type": "string"
        }
      }
    },
    "EventPutPost": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventPutRsvp": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventDeletePhoto": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventDeleteEvent": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventDeleteTopic": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "EventDeletePost": {
      "type": "object",
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SettingGetPrivacy": {
      "type": "object",
      "required": [
        "status",
        "blockusers",
        "search",
        "availableComments",
        "availablesProfileView",
        "profilePrivacy",
        "actionTypes",
        "enabledAction",
        "commentPrivacy"
      ],
      "properties": {
        "status": {
          "type": "boolean"
        },
        "blockusers": {
          "type": "array",
          "$ref": "#/definitions/settingBlockUsers"
        },
        "search": {
          "type": "boolean"
        },
        "availableComments": {
          "type": "array",
          "$ref": "#/definitions/settingAvailableComments"
        },
        "availablesProfileView": {
          "type": "array",
          "$ref": "#/definitions/settingAvailableProfileView"
        },
        "profilePrivacy": {
          "type": "string"
        },
        "actionTypes": {
          "type": "array",
          "$ref": "#/definitions/settingActionTypes"
        },
        "enabledAction": {
          "type": "array",
          "$ref": "#/definitions/settingEnableAction"
        },
        "commentPrivacy": {
          "type": "string"
        }
      }
    },
    "settingBlockUsers": {
      "type": "object",
      "required": [
        "block_title"
      ],
      "properties": {
        "block_title": {
          "type": "string"
        }
      }
    },
    "settingAvailableComments": {
      "type": "object",
      "required": [
        "owner",
        "member",
        "network",
        "registered"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "member": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "registered": {
          "type": "string"
        }
      }
    },
    "settingAvailableProfileView": {
      "type": "object",
      "required": [
        "owner",
        "member",
        "network",
        "registered",
        "everyone"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "member": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "registered": {
          "type": "string"
        },
        "everyone": {
          "type": "string"
        }
      }
    },
    "settingActionTypes": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "settingEnableAction": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ViewedPostView": {
      "type": "object",
      "required": [
        "status",
        "viewers",
        "totalViewCount",
        "maxViewCount"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "viewers": {
          "type": "string"
        },
        "totalViewCount": {
          "type": "string"
        },
        "maxViewCount": {
          "type": "string"
        }
      }
    },
    "ViewedGetList": {
      "type": "object",
      "required": [
        "status",
        "viewers",
        "totalViewCount",
        "maxViewCount"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "viewers": {
          "type": "array",
          "$ref": "#/definitions/Viewers"
        },
        "totalViewCount": {
          "type": "integer"
        },
        "maxViewCount": {
          "type": "integer"
        }
      }
    },
    "Viewers": {
      "type": "object",
      "required": [
        "photoUrl",
        "userId",
        "email",
        "username"
      ],
      "properties": {
        "photoUrl": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    }
  }
}